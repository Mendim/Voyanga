// Generated by CoffeeScript 1.3.3
(function() {
  var MONTHS, Result, ResultSet, Voyage,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  MONTHS = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентрября', 'ноября', 'декабря'];

  Voyage = (function() {

    function Voyage(data, result) {
      var flights;
      this.parts = [];
      flights = data.flights;
      this.departureDate = new Date(flights[0].departureDate);
      this.parts = flights[0].flightParts;
      this.arrivalDate = new Date(this.parts[this.parts.length - 1].datetimeEnd);
      this._duration = flights[0].fullDuration;
    }

    Voyage.prototype.departureInt = function() {
      return this.departureDate.getHours() * 60 + this.departureDate.getMinutes();
    };

    Voyage.prototype.departureDayMo = function() {
      var result;
      result = "";
      result += this.departureDate.getDate();
      result += " ";
      return result += MONTHS[this.departureDate.getMonth()];
    };

    Voyage.prototype.departureTime = function() {
      var minutes, result;
      result = "";
      result += this.departureDate.getHours();
      result += ":";
      minutes = this.departureDate.getMinutes().toString();
      if (minutes.length === 1) {
        minutes = "0" + minutes;
      }
      return result += minutes;
    };

    Voyage.prototype.arrivalDayMo = function() {
      var result;
      result = "";
      result += this.arrivalDate.getDate();
      result += " ";
      return result += MONTHS[this.arrivalDate.getMonth()];
    };

    Voyage.prototype.arrivalTime = function() {
      var minutes, result;
      result = "";
      result += this.arrivalDate.getHours();
      result += ":";
      minutes = this.arrivalDate.getMinutes().toString();
      if (minutes.length === 1) {
        minutes = "0" + minutes;
      }
      return result += minutes;
    };

    Voyage.prototype.fullDuration = function() {
      var all_minutes, hours, minutes;
      all_minutes = this._duration / 60;
      minutes = all_minutes % 60;
      hours = (all_minutes - minutes) / 60;
      return hours + " ч. " + minutes + " м.";
    };

    return Voyage;

  })();

  Result = (function() {

    function Result(data) {
      this.chooseStacked = __bind(this.chooseStacked, this);

      var flights;
      flights = data.flights;
      this.price = Math.ceil(data.price);
      this._stacked = false;
      this.roundTrip = flights.length === 2;
      this.departureCity = data.flights[0].departureCity;
      if (!this.roundTrip) {
        this.arrivalCity = data.flights[0].arrivalCity;
        this.parts = flights[0].flightParts;
        this.direct = this.parts.length === 1;
        this.departureAirport = this.parts[0].departureAirport;
        this.arrivalAirport = this.parts[this.parts.length - 1].arrivalAirport;
      }
      this.activeVoyage = new Voyage(data, this);
      this.voyages = [];
      this.voyages.push(this.activeVoyage);
      this.activeVoyage = ko.observable(this.activeVoyage);
    }

    Result.prototype.departureDayMo = function() {
      return this.activeVoyage().departureDayMo();
    };

    Result.prototype.departureTime = function() {
      return this.activeVoyage().departureTime();
    };

    Result.prototype.arrivalDayMo = function() {
      return this.activeVoyage().arrivalDayMo();
    };

    Result.prototype.arrivalTime = function() {
      return this.activeVoyage().arrivalTime();
    };

    Result.prototype.fullDuration = function() {
      return this.activeVoyage().fullDuration();
    };

    Result.prototype.stopsRatio = function() {
      var data, index, part, result, _i, _j, _len, _len1, _ref;
      result = [];
      if (this.direct) {
        return result;
      }
      _ref = this.parts.slice(0, -1);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        part = _ref[_i];
        result.push(Math.ceil(part.duration / this._duration * 80));
      }
      for (index = _j = 0, _len1 = result.length; _j < _len1; index = ++_j) {
        data = result[index];
        if (index > 1) {
          result[index] = result[index - 1] + data;
        } else {
          result[index] = data + 10;
        }
      }
      return result;
    };

    Result.prototype.stopoverText = function() {
      var part, result, _i, _len, _ref;
      result = [];
      _ref = this.parts.slice(0, -1);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        part = _ref[_i];
        result.push(part.arrivalCity);
      }
      return result.join(', ');
    };

    Result.prototype.stacked = function() {
      return this._stacked;
    };

    Result.prototype.push = function(data) {
      this._stacked = true;
      return this.voyages.push(new Voyage(data));
    };

    Result.prototype.chooseStacked = function(voyage) {
      return this.activeVoyage(voyage);
    };

    Result.prototype.sort = function() {
      return this.voyages.sort(function(a, b) {
        return a.departureInt() - b.departureInt();
      });
    };

    return Result;

  })();

  ResultSet = (function() {

    function ResultSet(rawVoyages) {
      var flightVoyage, key, result, _i, _j, _len, _len1, _ref, _ref1, _ref2;
      this._results = {};
      for (_i = 0, _len = rawVoyages.length; _i < _len; _i++) {
        flightVoyage = rawVoyages[_i];
        key = flightVoyage.price + "_" + flightVoyage.valCompany;
        if (this._results[key]) {
          this._results[key].push(flightVoyage);
        } else {
          this._results[key] = new Result(flightVoyage);
        }
      }
      this.cheapest = this._results[key];
      _ref = this._results;
      for (key in _ref) {
        result = _ref[key];
        if (result.price < this.cheapest.price) {
          this.cheapest = result;
        }
      }
      this.data = [];
      _ref1 = this._results;
      for (key in _ref1) {
        result = _ref1[key];
        this.data.push(result);
      }
      _ref2 = this.data;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        result = _ref2[_j];
        result.sort();
      }
    }

    return ResultSet;

  })();

  $(function() {
    var stacked;
    console.log(data);
    stacked = new ResultSet(data.flights.flightVoyages);
    return ko.applyBindings({
      'results': stacked
    });
  });

}).call(this);
