// Generated by CoffeeScript 1.3.3
/*
SEARCH controller, should be splitted once we will get more actions here
*/

var EventController,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __slice = [].slice;

EventController = (function() {

  function EventController(searchParams) {
    this.searchParams = searchParams;
    this.indexAction = __bind(this.indexAction, this);

    this.handleResults = __bind(this.handleResults, this);

    this.searchAction = __bind(this.searchAction, this);

    this.api = '';
    this.routes = {
      '/event/:from/:id/': this.searchAction,
      '': this.indexAction
    };
    _.extend(this, Backbone.Events);
  }

  EventController.prototype.searchAction = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return window.voyanga_debug("EVENT: Invoking searchAction", args);
  };

  /*    # update search params with values in route
      @searchParams.fromList(args)
  
      # tempoprary development cache
      @api.search  @searchParams.url(), @handleResults
  */


  EventController.prototype.handleResults = function(data) {
    return window.voyanga_debug("searchAction: handling results", data);
  };

  /*
        # temporary development cache
        stacked = new AviaResultSet data.flights.flightVoyages
        stacked.injectSearchParams data.searchParams
        stacked.postInit()
        # we need observable here to be compatible with tours
        @render 'results', {results: ko.observable(stacked)}
  
        ko.processAllDeferredBindingUpdates()
  */


  EventController.prototype.indexAction = function() {
    window.voyanga_debug("EVENT: invoking indexAction");
    return this.render('index', {});
  };

  EventController.prototype.render = function(view, data) {
    return this.trigger("viewChanged", view, data);
  };

  return EventController;

})();
