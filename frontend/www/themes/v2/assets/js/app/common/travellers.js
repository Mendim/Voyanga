// Generated by CoffeeScript 1.3.3
var Passengers, Roomers, Travellers,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Travellers = (function() {

  function Travellers() {
    this.afterRender = __bind(this.afterRender, this);

    this.show = __bind(this.show, this);
    this.inside = false;
    this.inside2 = false;
    this.inside3 = false;
  }

  Travellers.prototype.show = function(context, event) {
    var el,
      _this = this;
    el = $(event.currentTarget);
    if (!el.hasClass('active')) {
      $(document.body).mousedown(function() {
        if (_this.inside || _this.inside2 || _this.inside3) {
          return;
        }
        return _this.close();
      });
      $('.how-many-man .btn').addClass('active');
      $('.how-many-man .content').addClass('active');
      return $('.how-many-man').find('.popup').addClass('active');
    } else {
      return this.close();
    }
  };

  Travellers.prototype.afterRender = function() {
    var _this = this;
    $('.how-many-man .popup').find('input').hover(function() {
      $(this).parent().find('.plusOne').show();
      return $(this).parent().find('.minusOne').show();
    });
    $('.adults,.childs,.small-childs').hover(null, function() {
      $(this).parent().find('.plusOne').hide();
      return $(this).parent().find('.minusOne').hide();
    });
    $('.plusOne').hover(function() {
      $(this).addClass('active');
      return $('.minusOne').addClass('active');
    }, function() {
      $(this).removeClass('active');
      return $('.minusOne').removeClass('active');
    });
    $('.minusOne').hover(function() {
      $(this).addClass('active');
      return $('.plusOne').addClass('active');
    }, function() {
      $(this).removeClass('active');
      return $('.plusOne').removeClass('active');
    });
    $('.how-many-man .popup').find('input').focus(function() {
      $(this).attr('rel', $(this).val());
      return $(this).val('');
    });
    $('.how-many-man .popup').find('input').blur(function() {
      if ($(this).val() === '') {
        $(this).val($(this).attr('rel'));
      }
      return $(this).trigger('change');
    });
    $('.how-many-man').find('.popup').hover(function() {
      return _this.inside = true;
    }, function() {
      return _this.inside = false;
    });
    $('.how-many-man .content').hover(function() {
      return _this.inside2 = true;
    }, function() {
      return _this.inside2 = false;
    });
    return $('.how-many-man .btn').hover(function() {
      return _this.inside3 = true;
    }, function() {
      return _this.inside3 = false;
    });
  };

  return Travellers;

})();

Passengers = (function(_super) {

  __extends(Passengers, _super);

  function Passengers() {
    this.afterRender = __bind(this.afterRender, this);

    this.balanceTravelers = __bind(this.balanceTravelers, this);

    var _this = this;
    this.template = 'passengers-template';
    this.adults = ko.observable(1);
    this.children = ko.observable(0);
    this.infants = ko.observable(0);
    this.MAX_TRAVELERS = 9;
    this.MAX_CHILDREN = 8;
    this.children.subscribe(function(newValue) {
      if (newValue > _this.MAX_TRAVELERS - 1) {
        _this.children(_this.MAX_TRAVELERS - 1);
      }
      return _this.balanceTravelers(["adults", 'infants'], _this);
    });
    this.infants.subscribe(function(newValue) {
      if (newValue > _this.adults()) {
        _this.adults(_this.infants());
      }
      return _this.balanceTravelers(["children", 'adults'], _this);
    });
    this.sum_children = ko.computed(function() {
      return _this.children() * 1 + _this.infants() * 1;
    });
    this.overall = ko.computed(function() {
      return _this.adults() * 1 + _this.children() * 1 + _this.infants() * 1;
    });
    this.adults.subscribe(function(newValue) {
      if (_this.infants() > _this.adults()) {
        _this.infants(_this.adults());
      }
      if (newValue > _this.MAX_TRAVELERS) {
        _this.adults(_this.MAX_TRAVELERS);
      }
      return _this.balanceTravelers(["children", 'infants'], _this);
    });
  }

  /*
    Balances number of travelers, using those which was not affected by most recent user change
  */


  Passengers.prototype.balanceTravelers = function(others, model) {
    var delta, prop, _i, _len, _results;
    if (this.overall() > this.MAX_TRAVELERS) {
      delta = model.overall() - this.MAX_TRAVELERS;
      _results = [];
      for (_i = 0, _len = others.length; _i < _len; _i++) {
        prop = others[_i];
        if (model[prop]() >= delta) {
          model[prop](model[prop]() - delta);
          break;
        } else {
          delta -= model[prop]();
          _results.push(model[prop](0));
        }
      }
      return _results;
    }
  };

  Passengers.prototype.afterRender = function() {
    return Passengers.__super__.afterRender.call(this);
  };

  Passengers.prototype.plusOne = function(model, e) {
    var prop;
    prop = $(e.target).attr("rel");
    return model[prop](model[prop]() + 1);
  };

  Passengers.prototype.minusOne = function(model, e) {
    var prop;
    prop = $(e.target).attr("rel");
    return model[prop](model[prop]() - 1);
  };

  Passengers.prototype.close = function() {
    $(document.body).unbind('mousedown');
    $('.how-many-man .btn').removeClass('active');
    $('.how-many-man .content').removeClass('active');
    return $('.how-many-man').find('.popup').removeClass('active');
  };

  return Passengers;

})(Travellers);

Roomers = (function(_super) {

  __extends(Roomers, _super);

  function Roomers(item) {
    this.getUrl = __bind(this.getUrl, this);

    this.getHash = __bind(this.getHash, this);

    this.minusOne = __bind(this.minusOne, this);

    this.plusOne = __bind(this.plusOne, this);

    var i, parts, template, _i, _ref,
      _this = this;
    Roomers.__super__.constructor.call(this);
    console.log('I AM ROOMER AND I AM INITIALIZED');
    template = 'roomers-template';
    this.adults = ko.observable('');
    this.children = ko.observable(0);
    this.ages = ko.observableArray();
    if (item) {
      parts = item.split(':');
      this.adults = ko.observable(parts[0]);
      this.children = ko.observable(parts[1]);
      for (i = _i = 0, _ref = this.children; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        ages.push(ko.observable(parts[2 + i]));
      }
      this.children.subscribe(function(newValue) {
        var _j, _ref1;
        if (_this.ages().length < newValue) {
          for (i = _j = 0, _ref1 = newValue - _this.ages().length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
            _this.ages.push(ko.observable(12));
            console.log("$# PUSHING", i);
          }
        } else if (_this.ages().length > newValue) {
          _this.ages.splice(newValue);
        }
        return ko.processAllDeferredBindingUpdates();
      });
    }
  }

  Roomers.prototype.plusOne = function(context, event) {
    var target;
    target = $(event.currentTarget).attr('rel');
    return this[target](this[target]() + 1);
  };

  Roomers.prototype.minusOne = function(context, el) {
    var target;
    target = $(event.currentTarget).attr('rel');
    if (this[target]() > 0) {
      return this[target](this[target]() - 1);
    }
  };

  Roomers.prototype.getHash = function() {
    var age, parts, _i, _len, _ref;
    parts = [this.adults(), this.children()];
    _ref = this.ages();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      age = _ref[_i];
      parts.push(age);
    }
    return parts.join(':');
  };

  Roomers.prototype.getUrl = function(i) {
    return ("rooms[" + i + "][adt]=") + this.adults() + ("&rooms[" + i + "][chd]=") + this.children() + ("&rooms[" + i + "][chdAge]=0&rooms[" + i + "][cots]=0");
  };

  return Roomers;

})(Travellers);
