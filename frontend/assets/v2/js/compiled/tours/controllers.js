// Generated by CoffeeScript 1.4.0
/*
SEARCH controller, should be splitted once we will get more actions here
*/

var ToursController,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __slice = [].slice;

ToursController = (function() {

  function ToursController(searchParams) {
    this.searchParams = searchParams;
    this.checkTicketAction = __bind(this.checkTicketAction, this);

    this.handleResults = __bind(this.handleResults, this);

    this.searchAction = __bind(this.searchAction, this);

    this.indexAction = __bind(this.indexAction, this);

    this.api = new ToursAPI;
    this.routes = {
      '/search/*rest': this.searchAction,
      '': this.indexAction
    };
    this.key = "tours_10";
    _.extend(this, Backbone.Events);
  }

  ToursController.prototype.indexAction = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    window.voyanga_debug("TOURS: Invoking indexAction", args);
    this.trigger("index", {});
    this.render('index');
    return ResizeAvia();
  };

  ToursController.prototype.searchAction = function() {
    var args,
      _this = this;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    args[0] = exTrim(args[0], '/');
    args = args[0].split('/');
    this.searchParams.fromList(args);
    window.VisualLoaderInstance.start(this.api.loaderDescription);
    return this.api.search(this.searchParams.url(), function(data) {
      if (!data || data.error) {
        window.VisualLoaderInstance.start(_this.api.loaderDescription);
        throw new Error("Successfull api call with wrong/error response");
      }
      _this.stacked = _this.handleResults(data);
      _this.stacked.on('inner-template', function(data) {
        return _this.trigger('inner-template', data);
      });
      _this.trigger("results", _this.stacked);
      _this.render('results', _this.stacked);
      return ko.processAllDeferredBindingUpdates();
    });
  };

  ToursController.prototype.handleResults = function(data) {
    var hotel, item, items, postData, resultSet, stacked, _i, _j, _len, _len1, _ref, _ref1,
      _this = this;
    console.log("Handling results", data);
    stacked = new ToursResultSet(data, this.searchParams);
    if (data.items) {
      items = [];
      _ref = data.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.isHotel) {
          hotel = new HotelResult(item, stacked, item.duration, item, item.hotelDetails);
          items.push(hotel);
        } else {
          items.push(new AviaResult(item, stacked));
        }
      }
      if (stacked.findAndSelectItems(items)) {
        stacked.showOverview();
        postData = [];
        _ref1 = stacked.data();
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          resultSet = _ref1[_j];
          if (resultSet.isAvia()) {
            postData.push(resultSet.selection().getPostData());
          } else {
            postData.push(resultSet.selection().hotel.getPostData());
          }
        }
        $.ajax({
          url: this.api.endpoint + 'tour/search/updateEvent',
          data: {
            eventId: this.searchParams.eventId,
            startCity: this.searchParams.startCity(),
            items: postData
          },
          dataType: 'json',
          timeout: 90000,
          type: 'POST',
          success: function(data) {
            return cb(data);
          }
        });
      }
    }
    stacked.checkTicket = this.checkTicketAction;
    return stacked;
  };

  ToursController.prototype.checkTicketAction = function(toursData, resultDeferred) {
    var diff, now,
      _this = this;
    now = moment();
    diff = now.diff(this.stacked.creationMoment, 'seconds');
    if (diff < TOURS_TICKET_TIMELIMIT) {
      resultDeferred.resolve(this.stacked);
      return;
    }
    window.VisualLoaderInstance.start("Идет проверка выбранных выриантов<br>Это может занять от 5 до 30 секунд");
    return this.api.search(this.searchParams.url(), function(data) {
      var result, stacked;
      try {
        stacked = _this.handleResults(data);
      } catch (err) {
        window.VisualLoaderInstance.hide();
        new ErrorPopup('avia500');
        return;
      }
      result = stacked.findAndSelect(toursData);
      if (result) {
        return resultDeferred.resolve(stacked);
      } else {
        window.VisualLoaderInstance.hide();
        new ErrorPopup('toursNoTicketOnValidation', false, function() {});
        return _this.results(stacked);
      }
    });
  };

  ToursController.prototype.render = function(view, data) {
    return this.trigger("viewChanged", view, data);
  };

  return ToursController;

})();
