// Generated by CoffeeScript 1.4.0
var TourEntry, TourResultSet, TourTripResultSet, ToursAviaResultSet, ToursHotelsResultSet, ToursOverviewVM, ToursResultSet,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

TourEntry = (function() {

  function TourEntry() {
    this.beforeRender = __bind(this.beforeRender, this);

    this.rt = __bind(this.rt, this);

    this.savings = __bind(this.savings, this);

    this.maxPriceHtml = __bind(this.maxPriceHtml, this);

    this.minPriceHtml = __bind(this.minPriceHtml, this);

    this.priceHtml = __bind(this.priceHtml, this);

    this.price = __bind(this.price, this);

    this.isHotel = __bind(this.isHotel, this);

    this.isAvia = __bind(this.isAvia, this);
    _.extend(this, Backbone.Events);
    this.savingsWithAviaOnly = false;
  }

  TourEntry.prototype.isAvia = function() {
    return this.avia;
  };

  TourEntry.prototype.isHotel = function() {
    return this.hotels;
  };

  TourEntry.prototype.price = function() {
    if (this.selection() === null) {
      return 0;
    }
    return this.selection().price;
  };

  TourEntry.prototype.priceHtml = function() {
    if (this.noresults) {
      return "Нет результатов";
    }
    if (this.selection() === null) {
      return "<span class='noChoise'>Не выбрано</span>";
    }
    return Utils.formatPrice(this.price()) + '<span class="rur">o</span>';
  };

  TourEntry.prototype.minPriceHtml = function() {
    return Utils.formatPrice(this.minPrice()) + '<span class="rur">o</span>';
  };

  TourEntry.prototype.maxPriceHtml = function() {
    return Utils.formatPrice(this.maxPrice()) + '<span class="rur">o</span>';
  };

  TourEntry.prototype.savings = function() {
    if (this.selection() === null) {
      return 0;
    }
    return 0;
  };

  TourEntry.prototype.rt = function() {
    return false;
  };

  TourEntry.prototype.beforeRender = function() {};

  return TourEntry;

})();

ToursAviaResultSet = (function(_super) {

  __extends(ToursAviaResultSet, _super);

  function ToursAviaResultSet(raw, sp) {
    this.afterRender = __bind(this.afterRender, this);

    this.beforeRender = __bind(this.beforeRender, this);

    this.rt = __bind(this.rt, this);

    this.timelineStartDate = __bind(this.timelineStartDate, this);

    this.timelineEndDate = __bind(this.timelineEndDate, this);

    this.rtTimelineEnd = __bind(this.rtTimelineEnd, this);

    this.rtTimelineStart = __bind(this.rtTimelineStart, this);

    this.timelineEnd = __bind(this.timelineEnd, this);

    this.timelineStart = __bind(this.timelineStart, this);

    this.dateHtml = __bind(this.dateHtml, this);

    this.dateClass = __bind(this.dateClass, this);

    this.additionalText = __bind(this.additionalText, this);

    this.destinationText = __bind(this.destinationText, this);

    this.maxPrice = __bind(this.maxPrice, this);

    this.minPrice = __bind(this.minPrice, this);

    this.numAirlines = __bind(this.numAirlines, this);

    this.overviewPeople = __bind(this.overviewPeople, this);

    this.overviewText = __bind(this.overviewText, this);

    this.doNewSearch = __bind(this.doNewSearch, this);

    this.toBuyRequest = __bind(this.toBuyRequest, this);

    this._selectResult = __bind(this._selectResult, this);

    this.select = __bind(this.select, this);

    this.findAndSelectHash = __bind(this.findAndSelectHash, this);

    this.findAndSelect = __bind(this.findAndSelect, this);

    this.GAData = __bind(this.GAData, this);

    this.GAKey = __bind(this.GAKey, this);

    this.newResults = __bind(this.newResults, this);

    var _this = this;
    ToursAviaResultSet.__super__.constructor.apply(this, arguments);
    this.api = new AviaAPI;
    this.template = 'avia-results';
    this.selection = ko.observable(null);
    this.overviewTemplate = ko.computed(function() {
      if (_this.selection() === null) {
        return 'tours-overview-avia-no-selection';
      } else {
        return 'tours-overview-avia-ticket';
      }
    });
    this.panel = new AviaPanel();
    this.panel.handlePanelSubmit = this.doNewSearch;
    this.panel.sp.fromObject(sp);
    this.panel.original_template = this.panel.template;
    this.results = ko.observable();
    this.observableSP = ko.observable(null);
    this.newResults(raw, sp);
    this.data = {
      results: this.results
    };
  }

  ToursAviaResultSet.prototype.newResults = function(raw, sp) {
    var result,
      _this = this;
    this.rawSP = sp;
    this.observableSP(sp);
    result = new AviaResultSet(raw);
    result.injectSearchParams(sp);
    result.postInit();
    result.recommendTemplate = 'avia-tours-recommend';
    result.tours = true;
    result.select = function(res) {
      _this.select(res, result);
      return _this.trigger('next');
    };
    this.avia = true;
    this.noresults = result.noresults;
    return this.results(result);
  };

  ToursAviaResultSet.prototype.GAKey = function() {
    return this.rawSP.destinations[0].departure_iata + '/' + this.rawSP.destinations[0].arrival_iata;
  };

  ToursAviaResultSet.prototype.GAData = function() {
    var dest, passangers, result, rtDest;
    result = '';
    if (this.rt()) {
      result += '2';
    } else {
      result += '1';
    }
    passangers = [this.rawSP.adt, this.rawSP.chd, this.rawSP.inf];
    result += ', ' + passangers.join(" - ");
    dest = this.rawSP.destinations[0];
    if (this.rt()) {
      rtDest = this.rawSP.destinations[1];
    }
    result += ', ' + moment(dest.date).format('D.M.YYYY');
    if (this.rt()) {
      result += ' - ' + moment(rtDest.date).format('D.M.YYYY');
    }
    result += ', ' + moment(dest.date).diff(moment(), 'days');
    if (this.rt()) {
      result += ' - ' + moment(rtDest.date).diff(moment(dest.date), 'days');
    }
    return result;
  };

  ToursAviaResultSet.prototype.findAndSelect = function(result) {
    if (this.noresults) {
      return;
    }
    result = this.results().findAndSelect(result);
    if (!result) {
      return false;
    }
    this._selectResult(result);
    return result;
  };

  ToursAviaResultSet.prototype.findAndSelectHash = function(hash) {
    var result;
    if (this.noresults) {
      return;
    }
    result = this.results().findAndSelectHash(hash);
    if (!result) {
      return false;
    }
    this._selectResult(result);
    return result;
  };

  ToursAviaResultSet.prototype.select = function(res) {
    if (!(res != null)) {
      return;
    }
    if (res.ribbon) {
      res = res.data;
    }
    return this._selectResult(res);
  };

  ToursAviaResultSet.prototype._selectResult = function(res) {
    this.results().selected_key(res.key);
    res.parent.filtersConfig = res.parent.filters.getConfig();
    this.results().selected_best(res.best | false);
    return this.selection(res);
  };

  ToursAviaResultSet.prototype.toBuyRequest = function() {
    var result, sp;
    sp = this.observableSP();
    result = {};
    result.type = 'avia';
    result.searchId = this.selection().cacheId;
    result.searchKey = this.selection().flightKey();
    result.adults = sp.adt;
    result.children = sp.chd;
    result.infants = sp.inf;
    return result;
  };

  ToursAviaResultSet.prototype.doNewSearch = function() {
    var _this = this;
    window.VisualLoaderInstance.start(this.api.loaderDescription);
    return this.api.search(this.panel.sp.url(), function(data) {
      _this.newResults(data.flights.flightVoyages, data.searchParams);
      ko.processAllDeferredBindingUpdates();
      return window.VisualLoaderInstance.hide();
    });
  };

  ToursAviaResultSet.prototype.overviewText = function() {
    return "Перелет " + this.results().departureCity + ' &rarr; ' + this.results().arrivalCity;
  };

  ToursAviaResultSet.prototype.overviewPeople = function() {
    var sum;
    sum = this.panel.sp.adults() + this.panel.sp.children() + this.panel.sp.infants();
    return Utils.wordAfterNum(sum, 'человек', 'человека', 'человек');
  };

  ToursAviaResultSet.prototype.numAirlines = function() {
    return this.results().filters.airline.options().length;
  };

  ToursAviaResultSet.prototype.minPrice = function() {
    var cheapest;
    if (this.noresults) {
      return 0;
    }
    cheapest = _.reduce(this.results().data, function(el1, el2) {
      if (el1.price < el2.price) {
        return el1;
      } else {
        return el2;
      }
    }, this.results().data[0]);
    return cheapest.price;
  };

  ToursAviaResultSet.prototype.maxPrice = function() {
    var mostExpensive;
    if (this.noresults) {
      return 0;
    }
    mostExpensive = _.reduce(this.results().data, function(el1, el2) {
      if (el1.price > el2.price) {
        return el1;
      } else {
        return el2;
      }
    }, this.results().data[0]);
    return mostExpensive.price;
  };

  ToursAviaResultSet.prototype.destinationText = function() {
    return "<span class='left-avia-city'>" + this.results().departureCity + "&rarr;</span> " + "<span class='left-avia-city'>" + this.results().arrivalCity + "</span>";
  };

  ToursAviaResultSet.prototype.additionalText = function() {
    if (this.selection() === null) {
      return "";
    }
    if (this.rt()) {
      return "";
    } else {
      return ", " + this.selection().departureTime() + ' - ' + this.selection().arrivalTime();
    }
  };

  ToursAviaResultSet.prototype.dateClass = function() {
    if (this.rt()) {
      return 'blue-two';
    } else {
      return 'blue-one';
    }
  };

  ToursAviaResultSet.prototype.dateHtml = function(startonly) {
    var result, sp;
    if (startonly == null) {
      startonly = false;
    }
    sp = this.observableSP();
    result = '<div class="day">';
    result += dateUtils.formatHtmlDayShortMonth(moment(sp.destinations[0].date));
    result += '</div>';
    if (startonly) {
      return result;
    }
    if (this.rt()) {
      result += '<div class="day">';
      result += dateUtils.formatHtmlDayShortMonth(moment(sp.destinations[1].date));
      result += '</div>';
    }
    return result;
  };

  ToursAviaResultSet.prototype.timelineStart = function() {
    var source, sp;
    sp = this.observableSP();
    source = this.selection();
    if (source === null) {
      return sp.destinations[0].date;
      source = this.results().data[0];
    }
    return source.departureDate();
  };

  ToursAviaResultSet.prototype.timelineEnd = function() {
    var source, sp;
    sp = this.observableSP();
    source = this.selection();
    if (source === null) {
      return sp.destinations[0].date;
    }
    return source.arrivalDate();
  };

  ToursAviaResultSet.prototype.rtTimelineStart = function() {
    var source, sp;
    sp = this.observableSP();
    source = this.selection();
    if (source === null) {
      return sp.destinations[1].date;
    }
    return source.rtDepartureDate();
  };

  ToursAviaResultSet.prototype.rtTimelineEnd = function() {
    var source, sp;
    sp = this.observableSP();
    source = this.selection();
    if (source === null) {
      return sp.destinations[1].date;
    }
    return source.rtArrivalDate();
  };

  ToursAviaResultSet.prototype.timelineEndDate = function() {
    var source, sp;
    sp = this.observableSP();
    source = this.selection();
    if (source === null) {
      return moment(sp.destinations[0].date).toDate();
    }
    return source.arrivalDate();
  };

  ToursAviaResultSet.prototype.timelineStartDate = function() {
    var source, sp;
    sp = this.observableSP();
    source = this.selection();
    if (source === null) {
      return moment(sp.destinations[0].date).toDate();
    }
    return source.departureDate();
  };

  ToursAviaResultSet.prototype.rt = function() {
    var sp;
    sp = this.observableSP();
    return sp.destinations.length === 2;
  };

  ToursAviaResultSet.prototype.beforeRender = function() {
    if (this.results().selectedKey) {
      return this.results().filters.getConfig(this.results().filtersConfig);
    }
  };

  ToursAviaResultSet.prototype.afterRender = function() {
    var _this = this;
    if (this.results()) {
      if (this.results().selected_key) {
        return window.setTimeout(function() {
          if ($('.ticket-content .pressButton.selected').parent().parent().parent().parent().length) {
            return Utils.scrollTo($('.ticket-content .pressButton.selected').parent().parent().parent().parent());
          }
        }, 50);
      }
    }
  };

  return ToursAviaResultSet;

})(TourEntry);

ToursHotelsResultSet = (function(_super) {

  __extends(ToursHotelsResultSet, _super);

  function ToursHotelsResultSet(raw, sp) {
    this.savings = __bind(this.savings, this);

    this.afterRender = __bind(this.afterRender, this);

    this.beforeRender = __bind(this.beforeRender, this);

    this.timelineEndDate = __bind(this.timelineEndDate, this);

    this.timelineStartDate = __bind(this.timelineStartDate, this);

    this.timelineEnd = __bind(this.timelineEnd, this);

    this.timelineStart = __bind(this.timelineStart, this);

    this.dateHtml = __bind(this.dateHtml, this);

    this.dateClass = __bind(this.dateClass, this);

    this.additionalText = __bind(this.additionalText, this);

    this.price = __bind(this.price, this);

    this.destinationText = __bind(this.destinationText, this);

    this.maxPrice = __bind(this.maxPrice, this);

    this.minPrice = __bind(this.minPrice, this);

    this.numHotels = __bind(this.numHotels, this);

    this.overviewPeople = __bind(this.overviewPeople, this);

    this.overviewText = __bind(this.overviewText, this);

    this.doNewSearch = __bind(this.doNewSearch, this);

    this.toBuyRequest = __bind(this.toBuyRequest, this);

    this._selectRoomSet = __bind(this._selectRoomSet, this);

    this.select = __bind(this.select, this);

    this.findAndSelectSame = __bind(this.findAndSelectSame, this);

    this.findAndSelect = __bind(this.findAndSelect, this);

    this.GAData = __bind(this.GAData, this);

    this.GAKey = __bind(this.GAKey, this);

    this.newResults = __bind(this.newResults, this);

    var _this = this;
    ToursHotelsResultSet.__super__.constructor.apply(this, arguments);
    this.api = new HotelsAPI;
    this.panel = new HotelsPanel();
    this.panel.handlePanelSubmit = this.doNewSearch;
    this.panel.sp.fromObject(sp);
    this.panel.original_template = this.panel.template;
    this.selection = ko.observable(null);
    this.overviewTemplate = ko.computed(function() {
      if (_this.selection() === null) {
        return 'tours-overview-hotels-no-selection';
      } else {
        return 'tours-overview-hotels-ticket';
      }
    });
    this.template = 'hotels-results';
    this.activeHotel = ko.observable(0);
    this.results = ko.observable();
    this.data = {
      results: this.results
    };
    this.observableSP = ko.observable();
    this.savingsWithAviaOnly = true;
    this.newResults(raw, sp);
  }

  ToursHotelsResultSet.prototype.newResults = function(data, sp) {
    var result,
      _this = this;
    this.rawSP = sp;
    this.observableSP(sp);
    result = new HotelsResultSet(data, sp, this.activeHotel);
    result.tours(true);
    result.postInit();
    result.select = function(hotel) {
      var backUrl;
      hotel.parent = result;
      hotel.oldPageTop = $("html").scrollTop() | $("body").scrollTop();
      backUrl = window.location.hash;
      backUrl = backUrl.split('hotelId')[0];
      window.app.navigate(backUrl + 'hotelId/' + hotel.hotelId + '/');
      window.app.activeModuleInstance().controller.searchParams.hotelId(hotel.hotelId);
      window.app.activeModuleInstance().controller.searchParams.lastHotel = hotel;
      hotel.off('back');
      hotel.on('back', function() {
        return _this.trigger('setActive', _this, false, false, hotel.oldPageTop, function() {
          window.app.navigate(backUrl);
          window.app.activeModuleInstance().controller.searchParams.hotelId(false);
          if (!hotel.parent.showFullMap()) {
            return Utils.scrollTo('#hotelResult' + hotel.hotelId);
          } else {
            return hotel.parent.showFullMapFunc(null, null, true);
          }
        });
      });
      hotel.getFullInfo();
      hotel.off('select');
      hotel.on('select', function(roomData) {
        window.app.navigate(backUrl);
        window.app.activeModuleInstance().controller.searchParams.hotelId(false);
        _this.select(roomData);
        return _this.trigger('next');
      });
      return _this.trigger('setActive', {
        'data': hotel,
        template: 'hotels-info-template',
        'parent': _this
      });
    };
    result.selectFromPopup = function(hotel) {
      var backUrl;
      hotel.parent = result;
      hotel.activePopup.close();
      hotel.oldPageTop = $("html").scrollTop() | $("body").scrollTop();
      backUrl = window.location.hash;
      backUrl = backUrl.split('hotelId')[0];
      window.app.navigate(backUrl + 'hotelId/' + hotel.hotelId + '/');
      window.app.activeModuleInstance().controller.searchParams.hotelId(hotel.hotelId);
      window.app.activeModuleInstance().controller.searchParams.lastHotel = hotel;
      hotel.off('back');
      hotel.on('back', function() {
        return _this.trigger('setActive', _this, false, false, hotel.oldPageTop, function() {
          window.app.navigate(backUrl);
          window.app.activeModuleInstance().controller.searchParams.hotelId(false);
          if (!hotel.parent.showFullMap()) {
            return Utils.scrollTo('#hotelResult' + hotel.hotelId);
          }
        });
      });
      hotel.off('select');
      hotel.on('select', function(roomData) {
        window.app.navigate(backUrl);
        window.app.activeModuleInstance().controller.searchParams.hotelId(false);
        _this.select(roomData);
        return _this.trigger('next');
      });
      return _this.trigger('setActive', {
        'data': hotel,
        template: 'hotels-info-template',
        'parent': _this
      });
    };
    this.hotels = true;
    this.selection(null);
    this.noresults = result.noresults;
    return this.results(result);
  };

  ToursHotelsResultSet.prototype.GAKey = function() {
    return this.rawSP.city;
  };

  ToursHotelsResultSet.prototype.GAData = function() {
    var passangers, result, room, _i, _len, _ref;
    result = "1";
    passangers = [0, 0, 0];
    _ref = this.rawSP.rooms;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      room = _ref[_i];
      passangers[0] += room.adt * 1;
      passangers[1] += room.chd * 1;
      passangers[2] += room.cots * 1;
    }
    result += ", " + passangers.join(" - ");
    result += ", " + moment(this.rawSP.checkIn).format('D.M.YYYY') + ' - ' + moment(this.rawSP.checkIn).add(this.rawSP.duration, 'days').format('D.M.YYYY');
    result += ", " + moment(this.rawSP.checkIn).diff(moment(), 'days') + " - " + this.rawSP.duration;
    return result;
  };

  ToursHotelsResultSet.prototype.findAndSelect = function(result) {
    if (result) {
      if (result.roomSet) {
        result = this.results().findAndSelect(ko.utils.unwrapObservable(result.roomSet));
      } else {
        result = this.results().findAndSelect(ko.utils.unwrapObservable(result.roomSets)[0]);
      }
    }
    if (!result) {
      return false;
    }
    return this._selectRoomSet(result);
  };

  ToursHotelsResultSet.prototype.findAndSelectSame = function(result) {
    var ret;
    if (this.results() && this.results().data() && this.results().data().length) {
      if (result.roomSet) {
        ret = this.results().findAndSelectSame(ko.utils.unwrapObservable(result.roomSet));
      } else {
        ret = this.results().findAndSelectSame(ko.utils.unwrapObservable(result.roomSets)[0]);
      }
      if (!ret) {
        ret = this.results().findAndSelectSameParams(result.categoryId, result.getLatLng());
      }
      return this._selectRoomSet(ret);
    }
  };

  ToursHotelsResultSet.prototype.select = function(roomData) {
    if (roomData != null) {
      return this._selectRoomSet(roomData.roomSet);
    }
  };

  ToursHotelsResultSet.prototype._selectRoomSet = function(roomSet) {
    var hotel, limit, ordKey, pageFound, result, sortKey, _i, _len, _ref,
      _this = this;
    hotel = roomSet.parent;
    hotel.parent = this.results();
    this.activeHotel(hotel.hotelId);
    this.selection({
      roomSet: roomSet,
      hotel: hotel
    });
    hotel.parent.filtersConfig = hotel.parent.filters.getConfig();
    limit = 0;
    sortKey = hotel.parent.sortBy();
    ordKey = hotel.parent.ordBy();
    hotel.parent.data.sort(function(left, right) {
      if (left[sortKey] < right[sortKey]) {
        return -1 * ordKey;
      }
      if (left[sortKey] > right[sortKey]) {
        return 1 * ordKey;
      }
      return 0;
    });
    _ref = hotel.parent.data();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      result = _ref[_i];
      if (result.visible()) {
        limit++;
        if (result.hotelId === hotel.hotelId) {
          break;
        }
      }
    }
    pageFound = Math.ceil(limit / hotel.parent.showLimit);
    if (pageFound > hotel.parent.showParts()) {
      return hotel.parent.pagesLoad = pageFound;
    } else {
      return hotel.parent.pagesLoad = hotel.parent.showParts();
    }
  };

  ToursHotelsResultSet.prototype.toBuyRequest = function() {
    var result, room, sp, _i, _len, _ref;
    result = {};
    result.type = 'hotel';
    result.searchId = this.selection().hotel.cacheId;
    result.searchKey = this.selection().roomSet.resultId;
    result.adults = 0;
    result.age = false;
    result.cots = 0;
    sp = this.observableSP();
    _ref = sp.rooms;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      room = _ref[_i];
      result.adults += room.adultCount * 1;
      if (room.childAge) {
        result.age = room.childAgeage;
      }
      result.cots += room.cots * 1;
    }
    return result;
  };

  ToursHotelsResultSet.prototype.doNewSearch = function() {
    var _this = this;
    window.VisualLoaderInstance.start(this.api.loaderDescription);
    return this.api.search(this.panel.sp.url(), function(data) {
      data.searchParams.cacheId = data.cacheId;
      _this.newResults(data, data.searchParams);
      ko.processAllDeferredBindingUpdates();
      return window.VisualLoaderInstance.hide();
    });
  };

  ToursHotelsResultSet.prototype.overviewText = function() {
    return this.destinationText();
  };

  ToursHotelsResultSet.prototype.overviewPeople = function() {
    var sum;
    sum = this.panel.sp.overall();
    return Utils.wordAfterNum(sum, 'человек', 'человека', 'человек') + ', ' + this.results().wordDays;
  };

  ToursHotelsResultSet.prototype.numHotels = function() {
    return this.results().data().length;
  };

  ToursHotelsResultSet.prototype.minPrice = function() {
    return this.results().minPrice;
  };

  ToursHotelsResultSet.prototype.maxPrice = function() {
    return this.results().maxPrice;
  };

  ToursHotelsResultSet.prototype.destinationText = function() {
    var sp;
    sp = this.observableSP();
    if (this.noresults) {
      return sp.cityFull.caseNom;
    } else {
      return "<span class='hotel-left-long'>Отель в " + sp.cityFull.casePre + "</span><span class='hotel-left-short'>" + sp.cityFull.caseNom + "</span>";
    }
  };

  ToursHotelsResultSet.prototype.price = function() {
    if (this.selection() === null) {
      return 0;
    }
    return this.selection().roomSet.price;
  };

  ToursHotelsResultSet.prototype.additionalText = function() {
    if (this.selection() === null) {
      return "";
    }
    return ", " + this.selection().hotel.hotelName;
  };

  ToursHotelsResultSet.prototype.dateClass = function() {
    return 'orange-two';
  };

  ToursHotelsResultSet.prototype.dateHtml = function(startOnly) {
    var result;
    if (startOnly == null) {
      startOnly = false;
    }
    result = '<div class="day">';
    result += dateUtils.formatHtmlDayShortMonth(this.results().checkIn);
    result += '</div>';
    if (startOnly) {
      return result;
    }
    result += '<div class="day">';
    result += dateUtils.formatHtmlDayShortMonth(this.results().checkOut);
    return result += '</div>';
  };

  ToursHotelsResultSet.prototype.timelineStart = function() {
    return this.results().checkIn;
  };

  ToursHotelsResultSet.prototype.timelineEnd = function() {
    return this.results().checkOut;
  };

  ToursHotelsResultSet.prototype.timelineStartDate = function() {
    return this.results().checkIn._d;
  };

  ToursHotelsResultSet.prototype.timelineEndDate = function() {
    return this.results().checkOut._d;
  };

  ToursHotelsResultSet.prototype.beforeRender = function() {
    if (this.results()) {
      this.results().toursOpened = true;
      if (this.activeHotel()) {
        this.results().filters.setConfig(this.results().filtersConfig);
        return this.results().showParts(this.results().pagesLoad);
      } else {
        return this.results().postFilters();
      }
    }
  };

  ToursHotelsResultSet.prototype.afterRender = function() {
    var _this = this;
    if (this.results()) {
      if (this.activeHotel()) {
        return window.setTimeout(function() {
          if ($('.hotels-tickets .pressButton.selected').parent().parent().parent().parent().length) {
            return Utils.scrollTo($('.hotels-tickets .pressButton.selected').parent().parent().parent().parent());
          }
        }, 50);
      }
    }
  };

  ToursHotelsResultSet.prototype.savings = function() {
    if (this.selection() === null) {
      return 0;
    }
    return this.selection().roomSet.price - this.selection().roomSet.discountPrice;
  };

  return ToursHotelsResultSet;

})(TourEntry);

ToursResultSet = (function() {

  function ToursResultSet(raw, searchParams) {
    var result, variant, _i, _len, _ref,
      _this = this;
    this.searchParams = searchParams;
    this.findAndSelectItems = __bind(this.findAndSelectItems, this);

    this.findAndSelect = __bind(this.findAndSelect, this);

    this.buy = __bind(this.buy, this);

    this.createTourData = __bind(this.createTourData, this);

    this.showOverview = __bind(this.showOverview, this);

    this.deselectItem = __bind(this.deselectItem, this);

    this.removeItem = __bind(this.removeItem, this);

    this.nextEntry = __bind(this.nextEntry, this);

    this.setActiveTimelineHotels = __bind(this.setActiveTimelineHotels, this);

    this.setActiveTimelineAvia = __bind(this.setActiveTimelineAvia, this);

    this.setActive = __bind(this.setActive, this);

    _.extend(this, Backbone.Events);
    this.creationMoment = moment();
    this.data = ko.observableArray();
    _ref = raw.allVariants;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      variant = _ref[_i];
      if (!variant) {
        continue;
      }
      if (variant.flights) {
        result = new ToursAviaResultSet(variant.flights.flightVoyages, variant.searchParams);
      } else {
        result = new ToursHotelsResultSet(variant, variant.searchParams);
      }
      this.data.push(result);
      result.on('setActive', function(entry, beforeRender, afterRender, scrollTo, callback) {
        if (beforeRender == null) {
          beforeRender = true;
        }
        if (afterRender == null) {
          afterRender = true;
        }
        if (scrollTo == null) {
          scrollTo = 0;
        }
        if (callback == null) {
          callback = null;
        }
        return _this.setActive(entry, beforeRender, afterRender, scrollTo, callback);
      });
      result.on('next', function(entry) {
        return _this.nextEntry();
      });
    }
    this.timeline = new Timeline(this.data);
    this.selection = ko.observable(this.data()[0]);
    this.panel = ko.computed({
      read: function() {
        if (_this.selection().panel) {
          _this.panelContainer = _this.selection().panel;
        }
        if (!(_this.panelContainer.minimizedCalendar != null)) {
          _this.panelContainer.minimizedCalendar = function() {
            return true;
          };
        }
        _this.panelContainer.timeline = _this.timeline;
        _this.panelContainer.setActiveTimelineAvia = _this.setActiveTimelineAvia;
        _this.panelContainer.setActiveTimelineHotels = _this.setActiveTimelineHotels;
        if (!_this.panelContainer.onlyTimeline) {
          _this.panelContainer.onlyTimeline = false;
          _this.panelContainer.timeline.termsActive = true;
        } else {
          _this.panelContainer.timeline.termsActive = false;
        }
        _this.panelContainer.selection = _this.selection;
        _this.panelContainer.template = 'tours-panel-template';
        return _this.panelContainer;
      }
    });
    this.price = ko.computed(function() {
      var item, sum, _j, _len1, _ref1;
      sum = 0;
      _ref1 = _this.data();
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        item = _ref1[_j];
        sum += item.price();
      }
      return sum;
    });
    this.savings = ko.computed(function() {
      var has_avia, item, sum, _j, _k, _len1, _len2, _ref1, _ref2;
      has_avia = false;
      _ref1 = _this.data();
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        item = _ref1[_j];
        if (item.selection() && item.isAvia()) {
          has_avia = true;
        }
      }
      sum = 0;
      _ref2 = _this.data();
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        item = _ref2[_k];
        if (item.savingsWithAviaOnly) {
          if (has_avia) {
            sum += item.savings();
          }
        } else {
          sum += item.savings();
        }
      }
      return sum;
    });
    this.someSegmentsSelected = ko.computed(function() {
      var x, _j, _len1, _ref1;
      _ref1 = _this.data();
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        x = _ref1[_j];
        if (x.selection()) {
          return true;
        }
      }
      return false;
    });
    this.someSegmentsSelected.subscribe(function(newValue) {
      if (newValue) {
        return $('#tour-buy-btn').show('fast');
      } else {
        return $('#tour-buy-btn').hide('fast');
      }
    });
    this.vm = new ToursOverviewVM(this);
    this.voyashki = [];
    this.voyashki.push(new VoyashaCheapest(this));
    this.voyashki.push(new VoyashaOptima(this));
    this.voyashki.push(new VoyashaRich(this));
  }

  ToursResultSet.prototype.setActive = function(entry, beforeRender, afterRender, scrollTo, callback) {
    var _this = this;
    if (beforeRender == null) {
      beforeRender = true;
    }
    if (afterRender == null) {
      afterRender = true;
    }
    if (scrollTo == null) {
      scrollTo = 0;
    }
    if (callback == null) {
      callback = null;
    }
    $('#loadWrapBgMin').show();
    if (entry.overview) {
      $('.btn-timeline-and-condition').hide();
      window.toursOverviewActive = true;
    } else {
      window.toursOverviewActive = false;
    }
    if (entry.beforeRender && beforeRender) {
      entry.beforeRender();
    }
    this.trigger('inner-template', entry.template);
    return window.setTimeout(function() {
      if (entry.afterRender && afterRender) {
        entry.afterRender();
      }
      _this.selection(entry);
      ko.processAllDeferredBindingUpdates();
      ResizeAvia();
      $('#loadWrapBgMin').hide();
      if (!(scrollTo === false)) {
        Utils.scrollTo(scrollTo, false);
      }
      if (callback) {
        return callback();
      }
    }, 100);
  };

  ToursResultSet.prototype.setActiveTimelineAvia = function(entry) {
    return this.setActive(entry.avia.item);
  };

  ToursResultSet.prototype.setActiveTimelineHotels = function(entry) {
    return this.setActive(entry.hotel.item);
  };

  ToursResultSet.prototype.nextEntry = function() {
    var x, _i, _len, _ref;
    _ref = this.data();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      x = _ref[_i];
      if (!x.selection()) {
        this.setActive(x);
        return;
      }
    }
    return this.showOverview();
  };

  ToursResultSet.prototype.removeItem = function(item, event) {
    var idx;
    event.stopPropagation();
    if (this.data().length < 2) {
      return;
    }
    idx = this.data.indexOf(item);
    if (idx === -1) {
      return;
    }
    this.data.splice(idx, 1);
    if (item === this.selection()) {
      return this.setActive(this.data()[0]);
    }
  };

  ToursResultSet.prototype.deselectItem = function(item, event) {
    var idx;
    event.stopPropagation();
    idx = this.data.indexOf(item);
    this.data()[idx].selection(null);
    if (this.data()[idx].results().selected_key) {
      this.data()[idx].results().selected_key('nope');
    }
    if (this.data()[idx].activeHotel) {
      this.data()[idx].activeHotel('nope');
    }
    return deletePopUpHide();
  };

  ToursResultSet.prototype.showOverview = function() {
    var dummyPanel,
      _this = this;
    dummyPanel = {
      onlyTimeline: true,
      calendarHidden: function() {
        return true;
      },
      calendarValue: ko.observable({
        values: []
      })
    };
    this.setActive({
      template: 'tours-overview',
      data: this,
      overview: true,
      panel: dummyPanel
    });
    ResizeAvia();
    return window.setTimeout(function() {
      var aviaRes, calendarEvents, checkIn, checkOut, cur, data, description, dest, el, flight, flights, hash, hotelEvent, interval, people, resSet, sp, title, tmp, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2;
      people = 0;
      calendarEvents = [];
      _ref = _this.data();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        resSet = _ref[_i];
        sp = resSet.observableSP();
        if (resSet.isAvia()) {
          flights = [];
          if (people === 0) {
            people = sp.adt + sp.chd + sp.inf;
          }
          _ref1 = sp.destinations;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            dest = _ref1[_j];
            flight = {
              type: 'flight',
              description: dest.departure + ' || ' + dest.arrival,
              cityFrom: dest.departure_iata,
              cityTo: dest.arrival_iata
            };
            flight.dayStart = moment(dest.date)._d;
            flight.dayEnd = moment(dest.date)._d;
            flights.push(flight);
          }
          if (resSet.selection()) {
            aviaRes = resSet.selection();
            flights[0].dayEnd = aviaRes.arrivalDate();
            if (aviaRes.roundTrip) {
              flights[1].dayEnd = aviaRes.rtArrivalDate();
            }
          }
          for (_k = 0, _len2 = flights.length; _k < _len2; _k++) {
            flight = flights[_k];
            calendarEvents.push(flight);
          }
        }
        if (resSet.isHotel()) {
          if (people === 0) {
            people = sp.overall();
          }
          checkIn = moment(sp.checkIn).add('h', 8);
          checkOut = moment(sp.checkIn).add('d', sp.duration);
          hotelEvent = {
            dayStart: checkIn._d,
            dayEnd: checkOut._d,
            type: 'hotel',
            description: '',
            city: sp.city
          };
          if (resSet.selection()) {
            hotelEvent.description = resSet.selection().hotel.hotelName;
          }
          calendarEvents.push(hotelEvent);
        }
      }
      calendarEvents.sort(function(left, right) {
        if (left.dayStart > right.dayStart) {
          return 1;
        }
        if (left.dayStart < right.dayStart) {
          return -1;
        }
        return 0;
      });
      VoyangaCalendarTimeline.calendarEvents = calendarEvents;
      VoyangaCalendarTimeline.jObj = '#voyanga-calendar-timeline';
      VoyangaCalendarTimeline.init();
      tmp = [];
      _.each(calendarEvents, function(e) {
        var duration;
        if (e.type === 'flight') {
          return tmp.push(e.description.replace('||', '→').replace(/^\s+|\s+$/g, ''));
        } else if (e.type === 'hotel') {
          duration = Math.ceil((e.dayEnd - e.dayStart) / (1000 * 60 * 60 * 24));
          return tmp.push('отель ' + e.description.replace(/^\s+|\s+$/g, '') + '(' + Utils.wordAfterNum(duration, 'ночь', 'ночи', 'ночей') + ')');
        }
      });
      interval = dateUtils.formatDayMonthInterval(calendarEvents[0].dayStart, _.last(calendarEvents).dayEnd);
      tmp.push(interval);
      tmp.push((_this.price() - _this.savings()) + ' руб. ' + Utils.peopleReadable(people));
      title = "Я составил путешествие на Voyanga";
      description = tmp.join(', ');
      hash = dateUtils.formatDayMonthInterval(calendarEvents[0].dayStart, _.last(calendarEvents).dayEnd);
      hash += (_this.price() - _this.savings()) + people;
      _ref2 = _this.data();
      for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
        el = _ref2[_l];
        cur = el.selection();
        if (cur && el.isAvia()) {
          hash += cur.similarityHash();
        } else if (cur && el.isHotel()) {
          hash += cur.hotel.hotelId + cur.roomSet.similarityHash();
        }
      }
      data = $.extend({}, {
        hash: hash,
        name: description
      }, _this.createTourData());
      return $.post('/ajax/getSharingUrl', data, function(response) {
        var url;
        url = response['short'];
        $('.shareSocial').html('');
        $('.socialSharePlaceholder').clone(true).show().appendTo('.shareSocial');
        $('.shareSocial').find('input[name=textTextText]').val(url);
        return $('.shareSocial').show().find('a').each(function() {
          $(this).attr('addthis:title', title);
          $(this).attr('addthis:description', description);
          $(this).attr('addthis:url', url);
          return addthis.toolbox('.socialSharePlaceholder');
        });
      });
    }, 1000);
  };

  ToursResultSet.prototype.createTourData = function() {
    var data, index, key, params, toBuy, value, x, _i, _j, _len, _len1, _ref;
    toBuy = [];
    data = {};
    _ref = this.data();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      x = _ref[_i];
      if (x.selection()) {
        toBuy.push({
          module: 'Tours'
        });
        toBuy.push(x.toBuyRequest());
      }
    }
    for (index = _j = 0, _len1 = toBuy.length; _j < _len1; index = ++_j) {
      params = toBuy[index];
      for (key in params) {
        value = params[key];
        key = "item[" + index + "][" + key + "]";
        data[key] = value;
      }
    }
    return data;
  };

  ToursResultSet.prototype.buy = function() {
    var GAAviaData, GAAviaExtra, GAAviaKeys, GAHotelData, GAHotelExtra, GAHotelKeys, hasAvia, hasHotel, ticketValidCheck,
      _this = this;
    ticketValidCheck = $.Deferred();
    GAAviaKeys = [];
    GAHotelKeys = [];
    GAAviaData = [];
    GAHotelData = [];
    GAAviaExtra = [];
    GAHotelExtra = [];
    hasAvia = false;
    hasHotel = false;
    ticketValidCheck.done(function(resultSet) {
      var toBuy, x, _i, _len, _ref;
      toBuy = [];
      _ref = resultSet.data();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        x = _ref[_i];
        if (x.selection()) {
          if (x.isAvia()) {
            GAAviaKeys.push(x.GAKey());
            GAAviaData.push(x.GAData());
            GAAviaExtra.push(x.airline);
            hasAvia = true;
          }
          if (x.isHotel()) {
            GAHotelKeys.push(x.GAKey());
            GAHotelData.push(x.GAData());
            GAHotelExtra.push(x.hotelName);
            hasHotel = true;
          }
          toBuy.push({
            module: 'Tours'
          });
          toBuy.push(x.toBuyRequest());
        }
      }
      if (hasHotel) {
        GAPush(['_trackEvent', 'Trip_press_button_buy', GAHotelKeys.join('//'), GAHotelData.join('//')]);
      } else if (hasAvia) {
        GAPush(['_trackEvent', 'Avia_press_button_buy', GAAviaKeys.join('//'), GAAviaData.join('//')]);
      }
      return Utils.toBuySubmit(toBuy);
    });
    return this.checkTicket(this.data(), ticketValidCheck);
  };

  ToursResultSet.prototype.findAndSelect = function(data) {
    var entry, index, success, _i, _len;
    success = true;
    for (index = _i = 0, _len = data.length; _i < _len; index = ++_i) {
      entry = data[index];
      if (!this.data()[index].findAndSelect(entry.selection())) {
        success = false;
      }
    }
    return success;
  };

  ToursResultSet.prototype.findAndSelectItems = function(items) {
    var entry, index, result, success, _i, _len;
    if (items.length !== this.data().length) {
      return false;
    }
    success = true;
    this.data.sort(function(left, right) {
      var leftDate, rightDate, _ref, _ref1;
      leftDate = dateUtils.formatDayMonthYear(left.timelineStartDate());
      rightDate = dateUtils.formatDayMonthYear(right.timelineStartDate());
      if (leftDate === rightDate) {
        if (left.isAvia() !== right.isAvia()) {
          return (_ref = left.timelineEndDate() > right.timelineEndDate()) != null ? _ref : -{
            1: 1
          };
        }
      }
      return (_ref1 = left.timelineStartDate() > right.timelineStartDate()) != null ? _ref1 : -{
        1: 1
      };
    });
    for (index = _i = 0, _len = items.length; _i < _len; index = ++_i) {
      entry = items[index];
      if (this.data()[index].isAvia()) {
        result = this.data()[index].findAndSelect(entry);
        if (!result) {
          result = this.data()[index].findAndSelect(this.data()[index].results().cheapest());
        }
        if (!result) {
          success = false;
        }
      } else {
        result = this.data()[index].findAndSelectSame(entry);
        if (!result) {
          success = false;
        }
      }
    }
    return success;
  };

  return ToursResultSet;

})();

ToursOverviewVM = (function() {

  function ToursOverviewVM(resultSet) {
    this.resultSet = resultSet;
    this.afterRender = __bind(this.afterRender, this);

    this.dateHtml = __bind(this.dateHtml, this);

    this.dateClass = __bind(this.dateClass, this);

    this.startCity = __bind(this.startCity, this);

  }

  ToursOverviewVM.prototype.startCity = function() {
    var firstResult;
    firstResult = this.resultSet.data()[0];
    if (firstResult.isAvia()) {
      return firstResult.results().departureCity;
    } else {
      return firstResult.results().city.caseNom;
    }
  };

  ToursOverviewVM.prototype.dateClass = function() {
    return 'blue-one';
  };

  ToursOverviewVM.prototype.dateHtml = function() {
    var firstResult;
    firstResult = this.resultSet.data()[0];
    return firstResult.dateHtml(true);
  };

  ToursOverviewVM.prototype.afterRender = function() {};

  return ToursOverviewVM;

})();

TourTripResultSet = (function() {

  function TourTripResultSet(resultSet) {
    var newCity,
      _this = this;
    this.resultSet = resultSet;
    this.trackBuyDone = __bind(this.trackBuyDone, this);

    this.trackBuyDoneHotel = __bind(this.trackBuyDoneHotel, this);

    this.trackBuyDoneAvia = __bind(this.trackBuyDoneAvia, this);

    this.trackBuyClick = __bind(this.trackBuyClick, this);

    this.crossUrl = __bind(this.crossUrl, this);

    this.items = [];
    this.cities = [];
    this.hasFlight = false;
    this.hasHotel = false;
    this.flightCounter = ko.observable(0);
    this.hotelCounter = ko.observable(0);
    this.selected_key = ko.observable('');
    this.selected_best = ko.observable('');
    this.totalCost = 0;
    this.totalCostWithDiscount = 0;
    this.totalCostWithoutDiscount = 0;
    this.tour = false;
    this.additional = false;
    this.flightIds = ko.observableArray([]);
    this.firstDate = false;
    this.lastDate = false;
    this.people = false;
    this.flightIdsString = ko.computed(function() {
      var resArr;
      resArr = _this.flightIds();
      return resArr.join(':');
    });
    this.showTariffRules = function() {
      var aviaApi;
      aviaApi = new AviaAPI();
      window.VisualLoaderInstance.start('Загружаем правила применения тарифов');
      return aviaApi.search('flight/search/tariffRules?flightIds=' + _this.flightIdsString(), function(data) {
        var code, gp, item, key, tariff, tariffs, _i, _len, _ref, _ref1;
        if (data) {
          tariffs = [];
          _ref = _this.items;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            if (item.isFlight && data[item._data.flightKey]) {
              tariff = {};
              tariff.route = "Перелет из " + item.departureCity() + " в " + item.arrivalCity();
              tariff.codes = [];
              _ref1 = data[item._data.flightKey];
              for (key in _ref1) {
                code = _ref1[key];
                tariff.codes.push(code);
              }
              tariffs.push(tariff);
            }
          }
          if (tariffs) {
            gp = new GenericPopup('#tariff-rules', {
              'tariffs': tariffs
            });
          }
        }
        return window.VisualLoaderInstance.hide();
      });
    };
    this.flightCounterWord = ko.computed(function() {
      var res;
      if (_this.flightCounter() === 0) {
        return;
      }
      res = Utils.wordAfterNum(_this.flightCounter(), 'авиабилет', 'авиабилета', 'авиабилетов');
      if (_this.hotelCounter() > 0) {
        res = res + ', ';
      }
      return res;
    });
    this.hotelCounterWord = ko.computed(function() {
      if (_this.hotelCounter() === 0) {
        return;
      }
      return Utils.wordAfterNum(_this.hotelCounter(), 'гостиница', 'гостиницы', 'гостиниц');
    });
    this.crossUrlHref = ko.observable('');
    this.simHashes = [];
    this.roomsHash = '';
    _.each(this.resultSet.items, function(item) {
      var adults, asp, aviaResult, child, infant, rtDate, totalPeople;
      if (item.isFlight) {
        asp = new AviaSearchParams;
        asp.fromObject(item.searchParams);
        window.redirectHash = asp.getHash();
        if (!_this.firstDate) {
          _this.firstDate = dateUtils.formatDayShortMonth(asp.date());
        }
        if (asp.rtDate()) {
          _this.lastDate = dateUtils.formatDayShortMonth(asp.rtDate());
        }
        _this.tour = true;
        _this.hasFlight = true;
        _this.flightCounter(_this.flightCounter() + 1);
        _this.roundTrip = item.flights.length === 2;
        aviaResult = new AviaResult(item, _this);
        _this.flightIds.push(aviaResult._data.flightKey);
        aviaResult.sort();
        aviaResult.totalPeople = Utils.wordAfterNum(item.searchParams.adt + item.searchParams.chd + item.searchParams.inf, 'человек', 'человека', 'человек');
        if (!_this.people) {
          _this.people = Utils.wordAfterNum(item.searchParams.adt, 'взрослый', 'взрослых', 'взрослых');
          if (item.searchParams.chd > 0) {
            _this.people += ', ' + Utils.wordAfterNum(item.searchParams.chd, 'ребёнок', 'детей', 'детей');
          }
          if (item.searchParams.inf > 0) {
            _this.people += ', ' + Utils.wordAfterNum(item.searchParams.inf, 'младенец', 'младенцев', 'младенцев');
          }
        }
        if (!_this.crossUrlHref()) {
          _this.crossUrlHref('/#tours/search/' + asp.dep() + '/' + (asp.rt() ? '1' : '0') + '/');
        }
        _this.roomsHash = item.searchParams.adt + ':' + item.searchParams.chd + ':' + item.searchParams.inf;
        rtDate = moment(moment(asp.date()));
        rtDate.add('days', 7);
        if (asp.rt()) {
          rtDate = moment(asp.rtDate());
          _this.simHashes.push(aviaResult.similarityHash() + '.' + aviaResult.rtSimilarityHash());
          voyanga_debug('ASP:', asp, asp.rt(), asp.date(), asp.rtDate());
        } else {
          _this.simHashes.push(aviaResult.similarityHash());
        }
        _this.crossUrlHref(_this.crossUrlHref() + asp.arr() + '/' + moment(asp.date()).format('D.M.YYYY') + '/' + rtDate.format('D.M.YYYY') + '/');
        aviaResult.totalPeopleGen = Utils.wordAfterNum(item.searchParams.adt + item.searchParams.chd + item.searchParams.inf, 'человека', 'человек', 'человек');
        if (aviaResult.totalPeople !== '1 человек') {
          aviaResult.totalPeopleGenAlmost = 'за ' + aviaResult.totalPeopleGen;
        } else {
          aviaResult.totalPeopleGenAlmost = '1 человек';
        }
        aviaResult.rawSP = item.searchParams;
        if (_this.roundTrip) {
          _this.cities.push({
            isLast: false,
            cityName: item.flights[0].departureCity
          });
          _this.cities.push({
            isLast: false,
            cityName: item.flights[0].arrivalCity
          });
          _this.additional = {
            isLast: false,
            cityName: item.flights[0].departureCity
          };
        } else {
          _this.cities.push({
            isLast: false,
            cityName: item.flights[0].departureCity
          });
          _this.cities.push({
            isLast: false,
            cityName: item.flights[0].arrivalCity
          });
        }
        _this.items.push(aviaResult);
        _this.totalCostWithDiscount += aviaResult.price;
        return _this.totalCostWithoutDiscount = _this.totalCostWithDiscount;
      } else if (item.isHotel) {
        asp = new HotelsSearchParams;
        asp.fromObject(item.searchParams);
        window.redirectHash = asp.getHash();
        _this.hasHotel = true;
        if (!_this.firstDate) {
          _this.firstDate = dateUtils.formatDayShortMonth(moment(item.checkIn)._d);
        }
        _this.lastDate = dateUtils.formatDayShortMonth(moment(item.checkOut)._d);
        _this.hotelCounter(_this.hotelCounter() + 1);
        _this.lastHotel = new HotelResult(item, _this, item.duration, item, item.hotelDetails);
        _this.cities.push({
          cityName: _this.lastHotel.activeHotel.city
        });
        totalPeople = 0;
        adults = 0;
        child = 0;
        infant = 0;
        _.each(item.searchParams.rooms, function(room) {
          totalPeople += room.adultCount / 1 + room.childCount / 1 + room.cots / 1;
          adults += room.adultCount / 1;
          child += room.childCount / 1;
          return infant += room.cots / 1;
        });
        if (!_this.people) {
          _this.people = Utils.wordAfterNum(adults, 'взрослый', 'взрослых', 'взрослых');
          if (child > 0) {
            _this.people += ', ' + Utils.wordAfterNum(child, 'ребёнок', 'детей', 'детей');
          }
          if (infant > 0) {
            _this.people += ', ' + Utils.wordAfterNum(infant, 'младенец', 'младенцев', 'младенцев');
          }
        }
        _this.lastHotel.rawSP = item.searchParams;
        _this.lastHotel.totalPeople = Utils.wordAfterNum(totalPeople, 'человек', 'человека', 'человек');
        _this.lastHotel.totalPeopleGen = Utils.wordAfterNum(totalPeople, 'человека', 'человек', 'человек');
        if (_this.lastHotel.totalPeople !== '1 человек') {
          _this.lastHotel.totalPeopleGenAlmost = 'за ' + _this.lastHotel.totalPeopleGen;
        } else {
          _this.lastHotel.totalPeopleGenAlmost = '1 человек';
        }
        _this.items.push(_this.lastHotel);
        _this.totalCostWithDiscount += _this.lastHotel.roomSets()[0].discountPrice;
        return _this.totalCostWithoutDiscount += _this.lastHotel.roomSets()[0].price;
      }
    });
    if (this.crossUrlHref()) {
      this.crossUrlHref(this.crossUrlHref() + 'rooms/' + this.roomsHash + '/flightHash/' + this.simHashes.join('/') + '/');
    }
    if (this.additional) {
      this.cities.push(this.additional);
    }
    newCity = [];
    _.each(this.cities, function(city, i) {
      var a;
      a = _.last(newCity);
      if (!_.isObject(a)) {
        newCity.push(city);
      }
      if (_.last(newCity).cityName !== city.cityName) {
        return newCity.push(city);
      }
    });
    this.cities = newCity;
    _.each(this.cities, function(city, i) {
      if (i === (_this.cities.length - 1)) {
        return city.isLast = true;
      } else {
        city.left = Math.round((100 / _this.cities.length) * (i + 1) - 8.4);
        if (city.left < 0) {
          return city.left = '0%';
        } else {
          return city.left = city.left + '%';
        }
      }
    });
    if (this.tour) {
      this.totalCost = this.totalCostWithDiscount;
      this.labels = [];
      _.each(this.cities, function(city, i) {
        return _this.labels.push(city.cityName);
      });
      if (this.hasHotel) {
        if ($.cookie('currentTourHash')) {
          window.redirectHash = $.cookie('currentTourHash');
          $('.allVariantsBlock').css('visibility', 'visible');
        } else {
          $('.allVariantsBlock').css('visibility', 'hidden');
        }
        window.label = this.labels.join(' → ');
        $('.text-ticket1').text('туры');
        $('.text-ticket2').text('тур');
      } else {
        if (this.labels.length === 3) {
          window.label = this.labels[0] + ' ↔ ' + this.labels[1];
        } else {
          window.label = this.labels.join(' → ');
        }
      }
      window.label += ', <span class="data">' + this.firstDate;
      if (this.lastDate.length) {
        window.label += ' - ' + this.lastDate;
      }
      window.label += ', ' + this.people + '</span>';
    } else {
      if (this.hasHotel) {
        $('.text-ticket1').text('отели');
        $('.text-ticket2').text('отель');
      }
      this.totalCost = this.totalCostWithoutDiscount;
      this.labels = [];
      _.each(this.cities, function(city, i) {
        return _this.labels.push(city.cityName);
      });
      window.label = this.labels.join(', ');
      window.label += ', <span class="data">' + this.firstDate + ' - ' + this.lastDate + ', ' + this.people + '</span>';
    }
    $('.oneString').html(window.label);
    $('.btn-allVariantion').on('click', function() {
      window.location.href = '/#' + window.redirectHash;
      return false;
    });
  }

  TourTripResultSet.prototype.crossUrl = function() {};

  TourTripResultSet.prototype.trackBuyClick = function() {
    var GAAviaData, GAAviaExtra, GAAviaKeys, GAHotelData, GAHotelExtra, GAHotelKeys, aviaResult, hasAvia, hasHotel, hotelResult, x, _i, _len, _ref;
    if (this.hasFlight && this.items.length === 1) {
      aviaResult = this.items[0];
      GAPush(['_trackEvent', 'Avia_press_button_data', aviaResult.GAKey(), aviaResult.GAData()]);
      return;
    }
    if (this.hasHotel && this.items.length === 1) {
      hotelResult = this.items[0];
      GAPush(['_trackEvent', 'Hotel_press_button_data', hotelResult.GAKey(), hotelResult.GAData()]);
      return;
    }
    GAAviaKeys = [];
    GAHotelKeys = [];
    GAAviaData = [];
    GAHotelData = [];
    GAAviaExtra = [];
    GAHotelExtra = [];
    hasAvia = false;
    hasHotel = false;
    _ref = this.items;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      x = _ref[_i];
      if (x.isFlight) {
        GAAviaKeys.push(x.GAKey());
        GAAviaData.push(x.GAData());
        GAAviaExtra.push(x.airline);
        hasAvia = true;
      }
      if (x.isHotel) {
        GAHotelKeys.push(x.GAKey());
        GAHotelData.push(x.GAData());
        GAHotelExtra.push(x.hotelName);
        hasHotel = true;
      }
    }
    if (hasHotel) {
      return GAPush(['_trackEvent', 'Trip_press_button_data', GAHotelKeys.join('//'), GAHotelData.join('//')]);
    } else if (hasAvia) {
      return GAPush(['_trackEvent', 'Avia_press_button_data', GAAviaKeys.join('//'), GAAviaData.join('//')]);
    }
  };

  TourTripResultSet.prototype.trackBuyDoneAvia = function(aviaResult, orderId) {
    return GAPush(['_addItem', orderId, aviaResult.GAKey(), aviaResult.GAData(), 'Avia', Math.round(aviaResult.price / aviaResult.GAAdults()), aviaResult.GAAdults()]);
  };

  TourTripResultSet.prototype.trackBuyDoneHotel = function(hotelResult, orderId) {
    var ppn;
    if (this.tour) {
      ppn = Math.ceil(hotelResult.roomSets()[0].discountPrice / hotelResult.duration);
    } else {
      ppn = hotelResult.roomSets()[0].pricePerNight;
    }
    return GAPush(['_addItem', orderId, hotelResult.GAKey(), hotelResult.GAData(), 'Hotel', ppn, hotelResult.duration]);
  };

  TourTripResultSet.prototype.trackBuyDone = function(orderId) {
    var item, _i, _len, _ref;
    GAPush(['_addTrans', orderId, 'BankCard', this.totalCost, '', '', '', '', '']);
    _ref = this.items;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      if (item.isFlight) {
        this.trackBuyDoneAvia(item, orderId);
      }
      if (item.isHotel) {
        this.trackBuyDoneHotel(item, orderId);
      }
    }
    GAPush(['_trackTrans']);
    if (this.hasFlight && this.hasHotel) {
      GAPush(['_trackEvent', 'Trip_press_button_transfer', 'button_transfer', '' + this.totalCost]);
    }
    if (this.hasFlight && !this.hasHotel) {
      GAPush(['_trackEvent', 'Avia_press_button_transfer', 'button_transfer', '' + this.totalCost]);
    }
    if (!this.hasFlight && this.hasHotel) {
      return GAPush(['_trackEvent', 'Hotel_press_button_transfer', 'button_transfer', '' + this.totalCost]);
    }
  };

  return TourTripResultSet;

})();

TourResultSet = (function() {

  function TourResultSet(resultSet, orderId) {
    this.hidePanel = __bind(this.hidePanel, this);

    this.showPanel = __bind(this.showPanel, this);

    this.togglePanel = __bind(this.togglePanel, this);

    this.gotoAndShowPanel = __bind(this.gotoAndShowPanel, this);

    this.reinit = __bind(this.reinit, this);

    var _this = this;
    this.items = ko.observableArray([]);
    this.fullPrice = ko.observable(0);
    this.activePanel = ko.observable(null);
    this.overviewPeople = ko.observable(0);
    this.orderId = orderId;
    this.overviewPricePeople = ko.observable('');
    this.visiblePanel = ko.observable(true);
    this.startCity = ko.observable('');
    this.visiblePanel.subscribe(function(newValue) {
      if (newValue) {
        return _this.showPanel();
      } else {
        return _this.hidePanel();
      }
    });
    this.showPanelText = ko.computed(function() {
      if (_this.visiblePanel()) {
        return "свернуть";
      } else {
        return "развернуть";
      }
    });
    this.reinit(resultSet);
  }

  TourResultSet.prototype.reinit = function(resultSet) {
    var firstHotel, i, item, panelSet, room, startCity, startCityReadable, _i, _j, _len, _len1, _ref, _ref1,
      _this = this;
    this.resultSet = resultSet;
    this.hasFlight = false;
    this.hasHotel = false;
    this.items([]);
    this.flightCounter = ko.observable(0);
    this.hotelCounter = ko.observable(0);
    this.selected_key = ko.observable('');
    this.selected_best = ko.observable('');
    this.correctTour = ko.observable(false);
    this.overviewPeople = ko.observable(0);
    this.totalCost = 0;
    panelSet = new TourPanelSet();
    this.activePanel(panelSet);
    if (this.resultSet.items[0].isFlight) {
      startCity = this.resultSet.items[0].searchParams.destinations[0].departure_iata;
      startCityReadable = this.resultSet.items[0].searchParams.destinations[0].departure;
    } else {
      startCity = window.currentCityCode;
      startCityReadable = window.currentCityCodeReadable;
    }
    this.activePanel().startCity(startCity);
    this.activePanel().selectedParams = {
      ticketParams: [],
      orderId: this.orderId
    };
    this.activePanel().sp.calendarActivated(false);
    window.app.fakoPanel(panelSet);
    this.startCity(startCityReadable);
    this.flightCounterWord = ko.computed(function() {
      var res;
      res = Utils.wordAfterNum(_this.flightCounter(), 'авивабилет', 'авиабилета', 'авиабилетов');
      if (_this.hotelCounter() > 0) {
        res = res + ', ';
      }
      return res;
    });
    this.hotelCounterWord = ko.computed(function() {
      return Utils.wordAfterNum(_this.hotelCounter(), 'гостиница', 'гостиницы', 'гостиниц');
    });
    try {
      _.each(this.resultSet.items, function(item) {
        var aviaResult;
        if (item.isFlight) {
          _this.hasFlight = true;
          _this.flightCounter(_this.flightCounter() + 1);
          _this.roundTrip = item.flights.length === 2;
          aviaResult = new AviaResult(item, _this);
          aviaResult.sort();
          aviaResult.priceHtml = ko.observable(Utils.formatPrice(aviaResult.price) + '<span class="rur">o</span>');
          aviaResult.overviewText = ko.observable("Перелет " + aviaResult.departureCity() + ' &rarr; ' + aviaResult.arrivalCity());
          aviaResult.dateClass = ko.observable(_this.roundTrip ? 'blue-two' : 'blue-one');
          aviaResult.isAvia = ko.observable(item.isFlight);
          aviaResult.isHotel = ko.observable(item.isHotel);
          aviaResult.startDate = aviaResult.departureDate();
          aviaResult.dateHtml = ko.observable('<div class="day">' + dateUtils.formatHtmlDayShortMonth(aviaResult.departureDate()) + '</div>' + (_this.roundTrip ? '<div class="day">' + dateUtils.formatHtmlDayShortMonth(aviaResult.rtDepartureDate()) + '</div>' : ''));
          _this.activePanel().selectedParams.ticketParams.push(aviaResult.getParams());
          aviaResult.overviewPeople = ko.observable;
          _this.items.push(aviaResult);
          return _this.totalCost += aviaResult.price;
        } else if (item.isHotel) {
          _this.hasHotel = true;
          _this.hotelCounter(_this.hotelCounter() + 1);
          _this.lastHotel = new HotelResult(item, _this, item.duration, item, item.hotelDetails);
          _this.lastHotel.priceHtml = ko.observable(Utils.formatPrice(_this.lastHotel.roomSets()[0].price) + '<span class="rur">o</span>');
          _this.lastHotel.dateClass = ko.observable('orange-two');
          _this.lastHotel.isAvia = ko.observable(item.isFlight);
          _this.lastHotel.isHotel = ko.observable(item.isHotel);
          _this.lastHotel.startDate = _this.lastHotel.checkIn;
          _this.lastHotel.serachParams = item.searchParams;
          _this.lastHotel.overviewText = ko.observable("<span class='hotel-left-long'>Отель в " + _this.lastHotel.serachParams.cityFull.casePre + "</span><span class='hotel-left-short'>" + _this.lastHotel.address + "</span>");
          _this.lastHotel.dateHtml = ko.observable('<div class="day">' + dateUtils.formatHtmlDayShortMonth(_this.lastHotel.checkIn) + '</div>' + '<div class="day">' + dateUtils.formatHtmlDayShortMonth(_this.lastHotel.checkOut) + '</div>');
          _this.activePanel().selectedParams.ticketParams.push(_this.lastHotel.getParams());
          _this.items.push(_this.lastHotel);
          return _this.totalCost += _this.lastHotel.roomSets()[0].discountPrice;
        }
      });
      _.sortBy(this.items(), function(item) {
        return item.startDate;
      });
      this.startDate = this.items()[0].startDate;
      this.dateHtml = ko.observable('<div class="day">' + dateUtils.formatHtmlDayShortMonth(this.startDate) + '</div>');
      firstHotel = true;
      _ref = this.items();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.isHotel()) {
          if (!firstHotel) {
            this.activePanel().addPanel(true);
          } else {
            i = 0;
            _ref1 = item.serachParams.rooms;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              room = _ref1[_j];
              if (!this.activePanel().sp.rooms()[i]) {
                this.activePanel().sp.addSpRoom();
              }
              this.activePanel().sp.rooms()[i].adults(room.adultCount);
              this.activePanel().sp.rooms()[i].children(room.childCount);
              this.activePanel().sp.rooms()[i].ages(room.childAge);
              i++;
            }
            firstHotel = false;
          }
          this.activePanel().lastPanel.checkIn(moment(item.checkIn)._d);
          this.activePanel().lastPanel.checkOut(moment(item.checkOut)._d);
          this.activePanel().lastPanel.city(item.cityCode);
        }
      }
      this.activePanel().saveStartParams();
      _.last(this.activePanel().panels()).minimizedCalendar(true);
      this.overviewPeople(Utils.wordAfterNum(this.activePanel().sp.overall(), 'человек', 'человека', 'человек'));
      setTimeout(function() {
        return _this.activePanel().sp.calendarActivated(true);
      }, 1000);
      window.setTimeout(function() {
        if (_this.visiblePanel()) {
          return $('.sub-head.event').css('margin-top', '0px');
        } else {
          return $('.sub-head.event').stop(true).css('height', (_this.activePanel().heightPanelSet()) + 'px').css('margin-top', (-_this.activePanel().heightPanelSet() + 4) + 'px');
        }
      }, 200);
      this.correctTour(true);
    } catch (exept) {
      this.correctTour(false);
    }
    if (this.resultSet.price) {
      this.totalCost = this.resultSet.price;
    }
    return this.fullPrice(this.totalCost);
  };

  TourResultSet.prototype.gotoAndShowPanel = function() {
    Utils.scrollTo('.panel');
    return this.visiblePanel(true);
  };

  TourResultSet.prototype.togglePanel = function() {
    return this.visiblePanel(!this.visiblePanel());
  };

  TourResultSet.prototype.showPanel = function() {
    return $('.sub-head.event').animate({
      'margin-top': '0px'
    }, function() {
      return $('.tdCity .add-tour').show();
    });
  };

  TourResultSet.prototype.hidePanel = function() {
    $('.tdCity .add-tour').hide();
    return $('.sub-head.event').css('height', (this.activePanel().heightPanelSet()) + 'px').animate({
      'margin-top': (-this.activePanel().heightPanelSet() + 4) + 'px'
    });
  };

  return TourResultSet;

})();
