// Generated by CoffeeScript 1.4.0
var HOTEL_SERVICE_VERBOSE, HotelResult, HotelsResultSet, MEAL_VERBOSE, Room, RoomSet, STARS_VERBOSE,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

STARS_VERBOSE = ['one', 'two', 'three', 'four', 'five'];

HOTEL_SERVICE_VERBOSE = {
  'Сервис': 'service',
  'Спорт и отдых': 'sport',
  'Туристам': 'turist',
  'Интернет': 'internet',
  'Развлечения и досуг': 'dosug',
  'Парковка': 'parkovka',
  'Дополнительно': 'dop',
  'В отеле': 'in-hotel'
};

MEAL_VERBOSE = {
  'Американский завтрак': 'Завтрак',
  'Английский завтрак': 'Завтрак',
  'Завтрак в номер': 'Завтрак',
  'Завтрак + обед': 'Завтрак и обед',
  'Завтрак + обед + ужин': 'Завтрак и обед и ужин',
  'Завтрак + обед + ужин + напитки': 'Завтрак и обед и ужин и напитки',
  'Завтрак + ужин': 'Завтрак и ужин',
  'Континентальный завтрак': 'Завтрак',
  'Завтрак Шведский стол': 'Завтрак'
};

Room = (function() {

  function Room(data) {
    this.getParams = __bind(this.getParams, this);

    this.printDebug = __bind(this.printDebug, this);

    this.key = __bind(this.key, this);

    var _this = this;
    this.name = data.showName;
    this.nameNemo = data.roomNemoName;
    if (!this.nameNemo || data.roomName) {
      this.nameNemo = data.roomName;
    }
    if (this.nameNemo !== '' && typeof this.nameNemo !== 'undefined') {
      this.haveNemoName = true;
    } else {
      this.haveNemoName = false;
      this.nameNemo = '';
    }
    this.roomData = data;
    this.meal = data.meal;
    if (data.mealName) {
      this.meal = data.mealName;
    }
    this.last = ko.observable(false);
    if (typeof this.meal === "undefined" || this.meal === '') {
      this.meal = 'Не известно';
    }
    this.mealIcon = "ico-breakfast";
    if (MEAL_VERBOSE[this.meal]) {
      this.meal = MEAL_VERBOSE[this.meal];
    }
    this.hasMeal = this.meal !== 'Без питания' && this.meal !== 'Не известно';
    if (this.hasMeal && this.meal !== 'Завтрак') {
      this.mealIcon = "ico-breakfast-dinner";
    }
    this.debugInfo = ko.computed(function() {
      var propName, propVal, text, _ref;
      if (window.app.debugMode()) {
        text = 'debugInfo:{';
        _ref = _this.roomData;
        for (propName in _ref) {
          propVal = _ref[propName];
          text += propName + '=' + propVal + ', ';
        }
        text += '}';
        return text;
      }
      return false;
    });
  }

  Room.prototype.key = function() {
    return this.nameNemo + this.name + this.meal;
  };

  Room.prototype.printDebug = function() {
    return console.log('room data:', this.roomData);
  };

  Room.prototype.getParams = function() {
    var result;
    result = {};
    result.showName = this.name;
    result.nemoName = this.nameNemo;
    result.meal = this.meal;
    return result;
  };

  return Room;

})();

RoomSet = (function() {

  function RoomSet(data, parent, duration) {
    var room, _i, _len, _ref,
      _this = this;
    this.parent = parent;
    if (duration == null) {
      duration = 1;
    }
    this.hideCancelationRules = __bind(this.hideCancelationRules, this);

    this.showCancelationRules = __bind(this.showCancelationRules, this);

    this.addCancelationRules = __bind(this.addCancelationRules, this);

    this.similarityHash = __bind(this.similarityHash, this);

    this.key = __bind(this.key, this);

    this.minusCount = __bind(this.minusCount, this);

    this.plusCount = __bind(this.plusCount, this);

    this.checkCount = __bind(this.checkCount, this);

    this.getParams = __bind(this.getParams, this);

    this.price = Math.ceil(data.rubPrice);
    this.discountPrice = Math.ceil(data.discountPrice);
    this.savings = 0;
    this.resultId = data.resultId;
    this.searchId = data.searchId;
    this._data = data;
    this.pricePerNight = Math.ceil(this.price / duration);
    this.visible = ko.observable(true);
    this.cancelRules = ko.observable(false);
    this.cancelText = ko.computed(function() {
      var cancelObject, nowDate, result, _i, _len, _ref;
      if (_this.cancelRules()) {
        result = [];
        _ref = _this.cancelRules();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cancelObject = _ref[_i];
          if (cancelObject.charge) {
            nowDate = dateUtils.formatDayMonth(moment()._d);
            if (nowDate === dateUtils.formatDayMonth(cancelObject.cancelDate._d)) {
              result.push('Штраф взымается в размере ' + Math.ceil(cancelObject.price) + ' руб');
            } else {
              result.push('Штраф взымается в размере ' + Math.ceil(cancelObject.price) + ' руб с ' + dateUtils.formatDayMonth(cancelObject.cancelDate._d));
            }
          } else {
            result.push('Штраф за отмену не взымается ');
          }
        }
        return result.join('<br>');
      } else {
        return 'Условия бронирования не известны';
      }
    });
    this.specialOffer = ko.observable('');
    this.rooms = [];
    _ref = data.rooms;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      room = _ref[_i];
      if (room.offerText && !this.specialOffer()) {
        this.specialOffer(room.offerText);
      }
      this.rooms.push(new Room(room));
    }
    this.rooms[this.rooms.length - 1].last(true);
    this.selectedCount = ko.observable(0);
    this.selectedCount.subscribe(function(newValue) {
      return _this.checkCount(newValue);
    });
    this.selectText = ko.computed(function() {
      if (!_this.parent.tours()) {
        return "Забронировать";
      }
      if (_this.parent.activeResultId()) {
        return 'Выбран';
      } else {
        return 'Выбрать';
      }
    });
  }

  RoomSet.prototype.getParams = function() {
    var room, roomsArr, _i, _len, _ref;
    roomsArr = [];
    _ref = this.rooms;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      room = _ref[_i];
      roomsArr.push(room.getParams());
    }
    return roomsArr;
  };

  RoomSet.prototype.checkCount = function(newValue) {
    var count;
    count = parseInt(newValue);
    if (count < 0 || isNaN(count)) {
      return this.selectedCount(0);
    } else {
      return this.selectedCount(count);
    }
  };

  RoomSet.prototype.plusCount = function() {
    return this.selectedCount(this.selectedCount() + 1);
  };

  RoomSet.prototype.minusCount = function() {
    if (this.selectedCount() > 0) {
      return this.selectedCount(this.selectedCount() - 1);
    }
  };

  RoomSet.prototype.key = function() {
    var result, room, _i, _len, _ref;
    result = this.price;
    _ref = this.rooms;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      room = _ref[_i];
      result += room.key();
    }
    return result;
  };

  RoomSet.prototype.similarityHash = function() {
    var result, room, _i, _len, _ref;
    result = "";
    _ref = this.rooms;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      room = _ref[_i];
      result += room.key();
    }
    return result;
  };

  RoomSet.prototype.addCancelationRules = function(roomSetData) {
    var cancelObject, _i, _len, _ref;
    if (roomSetData.cancelCharges) {
      roomSetData.cancelCharges.sort(function(left, right) {
        if (left.fromTimestamp < right.fromTimestamp) {
          return 1;
        } else if (left.fromTimestamp > right.fromTimestamp) {
          return -1;
        }
        return 0;
      });
      _ref = roomSetData.cancelCharges;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cancelObject = _ref[_i];
        cancelObject.cancelDate = moment.unix(cancelObject.fromTimestamp);
        console.log('date convert', cancelObject, cancelObject.fromTimestamp, cancelObject.cancelDate);
      }
      return this.cancelRules(roomSetData.cancelCharges);
    }
  };

  RoomSet.prototype.showCancelationRules = function(el, e) {
    var offset, widthThisElement;
    widthThisElement = $(e.currentTarget).width();
    this.parent.activeRoomSet(this);
    this.parent.showRulesPopup(true);
    offset = $('#content > :eq(0)').offset();
    return $('.miniPopUp').css('left', (e.pageX - (widthThisElement / 2) - offset.left) + 'px').css('top', (e.pageY + 50 - offset.top) + 'px');
  };

  RoomSet.prototype.hideCancelationRules = function(el, ev) {
    return this.parent.showRulesPopup(false);
  };

  return RoomSet;

})();

HotelResult = (function() {

  function HotelResult(data, parent, duration, activeHotel, hotelDatails) {
    var elemId, elements, groupName, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8,
      _this = this;
    this.activeHotel = activeHotel;
    this.getPostData = __bind(this.getPostData, this);

    this.getParams = __bind(this.getParams, this);

    this.getLatLng = __bind(this.getLatLng, this);

    this.putToMap = __bind(this.putToMap, this);

    this.smallMapUrl = __bind(this.smallMapUrl, this);

    this.GAData = __bind(this.GAData, this);

    this.GAKey = __bind(this.GAKey, this);

    this.select = __bind(this.select, this);

    this.back = __bind(this.back, this);

    this.combinationClick = __bind(this.combinationClick, this);

    this.getFullInfo = __bind(this.getFullInfo, this);

    this.initFullInfo = __bind(this.initFullInfo, this);

    this.showMap = __bind(this.showMap, this);

    this.showMapInfo = __bind(this.showMapInfo, this);

    this.showMapDetails = __bind(this.showMapDetails, this);

    this.selectFromPopup = __bind(this.selectFromPopup, this);

    this.showDetails = __bind(this.showDetails, this);

    this.showPhoto = __bind(this.showPhoto, this);

    this.isActive = __bind(this.isActive, this);

    this.isFlight = false;
    this.isHotel = true;
    _.extend(this, Backbone.Events);
    if (!hotelDatails) {
      hotelDatails = {};
    }
    this.totalPeople = 0;
    this.parent = parent;
    this.tours = parent.tours || this.falseFunction;
    this.hotelId = data.hotelId;
    this.checkIn = moment(data.checkIn) || false;
    this.checkOut = moment(data.checkOut) || false;
    this.cityCode = data.cityCode || false;
    this.key = data.key;
    if (!this.checkOut && this.checkIn && duration) {
      this.checkOut = moment(this.checkIn);
      this.checkOut.add('d', duration);
    }
    if (this.checkOut) {
      this.checkOutText = this.checkOut.format('LL');
    }
    this.cacheId = parent.cacheId;
    this.activeResultId = ko.observable(0);
    this.hotelName = data.hotelName;
    this.address = hotelDatails.address;
    this.description = hotelDatails.description;
    if (!this.description) {
      this.description = "";
    }
    this.limitDesc = Utils.limitTextLenght(this.description, 195);
    this.limitDescPopup = Utils.limitTextLenght(this.description, 600);
    this.showMoreDesc = ko.observable(true);
    this.showMoreDescText = ko.computed(function() {
      if (_this.showMoreDesc()) {
        return 'Подробнее';
      } else {
        return 'Свернуть';
      }
    });
    this.photos = hotelDatails.images;
    this.site = hotelDatails.site;
    this.metroList = [];
    if (hotelDatails.metroList) {
      _ref = hotelDatails.metroList;
      for (elemId in _ref) {
        elements = _ref[elemId];
        this.metroList.push(elements);
      }
    }
    this.locations = [];
    if (hotelDatails.locations) {
      _ref1 = hotelDatails.locations;
      for (elemId in _ref1) {
        elements = _ref1[elemId];
        this.locations.push(elements);
      }
    }
    this.phone = hotelDatails.phone;
    this.fax = hotelDatails.fax;
    this.email = hotelDatails.email;
    this.numberFloors = parseInt(hotelDatails.numberFloors);
    this.builtIn = parseInt(hotelDatails.builtIn);
    this.numPhotos = 0;
    this.parent = parent;
    this.checkInTime = hotelDatails.earliestCheckInTime;
    if (this.checkInTime) {
      if (this.checkIn) {
        this.checkInText = this.checkIn.format('LL') + ", c " + this.checkInTime;
      } else {
        console.log('strange ...', this.checkIn, this.checkInText, this.hotelName, this.hotelId);
      }
    } else {
      this.checkInText = this.checkIn.format('LL');
    }
    this.frontPhoto = {
      smallUrl: 'http://upload.wikimedia.org/wikipedia/en/thumb/7/78/Trollface.svg/200px-Trollface.svg.png',
      largeUrl: 'http://ya.ru'
    };
    if (this.photos && this.photos.length) {
      this.frontPhoto = this.photos[0];
      this.numPhotos = this.photos.length;
    }
    this.activePhoto = this.frontPhoto['largeUrl'];
    this.starsNumeric = data.categoryId;
    this.stars = STARS_VERBOSE[this.starsNumeric - 1];
    this.rating = data.rating;
    if (this.rating === '-') {
      this.rating = 0;
    }
    this.ratingName = '';
    if ((0 <= (_ref2 = this.rating) && _ref2 < 2)) {
      this.ratingName = "рейтинг<br>отеля";
    } else if ((2 <= (_ref3 = this.rating) && _ref3 < 2.5)) {
      this.ratingName = "средний<br>отель";
    } else if ((2.5 <= (_ref4 = this.rating) && _ref4 < 3.5)) {
      this.ratingName = "неплохой<br>отель";
    } else if ((3.5 <= (_ref5 = this.rating) && _ref5 < 4)) {
      this.ratingName = "хороший<br>отель";
    } else if ((4 <= (_ref6 = this.rating) && _ref6 < 4.5)) {
      this.ratingName = "очень хороший<br>отель";
    } else if ((4.5 <= (_ref7 = this.rating) && _ref7 <= 5)) {
      this.ratingName = "великолепный<br>отель";
    }
    this.lat = hotelDatails.latitude / 1;
    this.lng = hotelDatails.longitude / 1;
    this.distanceToCenter = Math.ceil(data.centerDistance / 1000);
    if (this.distanceToCenter > 30) {
      this.distanceToCenter = 30;
    }
    this.duration = duration;
    this.haveFullInfo = ko.observable(false);
    this.selectText = ko.computed(function() {
      if (!_this.tours()) {
        return "Забронировать";
      }
      if (_this.isActive()) {
        return 'Выбран';
      } else {
        return 'Выбрать';
      }
    });
    this.showRulesPopup = ko.observable(false);
    this.activeRoomSet = ko.observable(null);
    this.hasHotelServices = hotelDatails.hotelServices ? true : false;
    this.hotelServices = hotelDatails.hotelServices;
    this.hasHotelGroupServices = hotelDatails.hotelGroupServices ? true : false;
    this.hotelGroupServices = [];
    if (hotelDatails.hotelGroupServices) {
      _ref8 = hotelDatails.hotelGroupServices;
      for (groupName in _ref8) {
        elements = _ref8[groupName];
        this.hotelGroupServices.push({
          groupName: groupName,
          elements: elements,
          groupIcon: HOTEL_SERVICE_VERBOSE[groupName]
        });
      }
    }
    this.hasRoomAmenities = hotelDatails.roomAmenities ? true : false;
    this.roomAmenities = hotelDatails.roomAmenities;
    this.roomSets = ko.observableArray([]);
    this.visible = ko.observable(true);
    this.wordDays = this.parent.wordDays;
    this.visibleRoomSets = ko.computed(function() {
      var result, roomSet, _i, _len, _ref9;
      result = [];
      _ref9 = _this.roomSets();
      for (_i = 0, _len = _ref9.length; _i < _len; _i++) {
        roomSet = _ref9[_i];
        if (roomSet.visible()) {
          result.push(roomSet);
        }
      }
      return result;
    });
    this.isShowAll = ko.observable(false);
    this.showAllText = ko.computed(function() {
      if (_this.isShowAll()) {
        return 'Свернуть все результаты';
      } else {
        return 'Посмотреть все результаты';
      }
    });
    this.push(data);
  }

  HotelResult.prototype.falseFunction = function() {
    return false;
  };

  HotelResult.prototype.push = function(data) {
    var set,
      _this = this;
    set = new RoomSet(data, this, this.duration);
    set.resultId = data.resultId;
    set.searchId = data.searchId;
    if (this.roomSets().length === 0) {
      this.cheapest = set.price;
      this.cheapestSet = set;
      this.minPrice = set.pricePerNight;
      this.maxPrice = set.pricePerNight;
    } else {
      if (set.price < this.cheapest) {
        this.cheapestSet = set;
      }
      this.cheapest = set.price < this.cheapest ? set.price : this.cheapest;
      this.minPrice = set.pricePerNight < this.minPrice ? set.pricePerNight : this.minPrice;
      this.maxPrice = set.pricePerNight > this.maxPrice ? set.pricePerNight : this.maxPrice;
    }
    this.roomSets.push(set);
    this.activeRoomSet(set);
    return this.roomSets.sort(function(left, right) {
      if (left.price > right.price) {
        return 1;
      } else if (left.price < right.price) {
        return -1;
      }
      return 0;
    });
  };

  HotelResult.prototype.isActive = function() {
    if (this.activeHotel) {
      return this.activeHotel() === this.hotelId;
    }
    return false;
  };

  HotelResult.prototype.showPhoto = function(fp, ev) {
    var ind;
    ind = $(ev.currentTarget).data('photo-index');
    if (!ind) {
      ind = 0;
    }
    return new PhotoBox(this.photos, this.hotelName, this.stars, ind);
  };

  HotelResult.prototype.showAllResults = function(data, event) {
    if (this.isShowAll()) {
      $(event.currentTarget).parent().parent().find('.hidden-roomSets').hide('fast', function() {
        return jsPaneScrollHeight();
      });
      return this.isShowAll(false);
    } else {
      $(event.currentTarget).parent().parent().find('.hidden-roomSets').show('fast', function() {
        return jsPaneScrollHeight();
      });
      return this.isShowAll(true);
    }
  };

  HotelResult.prototype.showDetails = function(data, event) {
    this.oldPageTop = $('html').scrollTop() | $('body').scrollTop();
    this.readMoreExpanded = false;
    this.activePopup = new GenericPopup('#hotels-body-popup', this);
    SizeBox('hotels-body-popup');
    ResizeBox('hotels-body-popup');
    return this.mapInitialized = false;
  };

  HotelResult.prototype.selectFromPopup = function(hotel, event) {
    var backUrl,
      _this = this;
    this.activePopup.close();
    backUrl = window.location.hash;
    backUrl = backUrl.split('hotelId')[0];
    window.app.navigate(backUrl + 'hotelId/' + hotel.hotelId + '/');
    window.app.activeModuleInstance().controller.searchParams.hotelId(hotel.hotelId);
    window.app.activeModuleInstance().controller.searchParams.lastHotel = hotel;
    hotel.off('back');
    hotel.on('back', function() {
      window.app.navigate(backUrl);
      window.app.activeModuleInstance().controller.searchParams.hotelId(false);
      window.app.render({
        results: ko.observable(hotel.parent)
      }, 'results');
      return window.setTimeout(function() {
        return Utils.scrollTo(hotel.oldPageTop, false);
      }, 50);
    });
    hotel.getFullInfo();
    window.app.render(hotel, 'info-template');
    return Utils.scrollTo('#content', false);
  };

  HotelResult.prototype.showMapDetails = function(data, event) {
    this.showDetails(data, event);
    return this.showMap();
  };

  HotelResult.prototype.showMapInfo = function(context, event) {
    var coords, el, map, mapOptions, marker;
    event.preventDefault();
    el = $('#hotel-info-tumblr-map');
    if (el.hasClass('active')) {
      return;
    }
    $('.place-buy .tmblr li').removeClass('active');
    el.addClass('active');
    $('#descr').hide();
    $('#map').show();
    if (!this.mapInitialized) {
      coords = new google.maps.LatLng(this.lat, this.lng);
      mapOptions = {
        center: coords,
        zoom: 12,
        mapTypeId: google.maps.MapTypeId.ROADMAP
      };
      map = new google.maps.Map($('#hotel-info-gmap')[0], mapOptions);
      marker = new google.maps.Marker({
        position: coords,
        map: map,
        icon: 'http://voyanga.com/themes/v2/images/pin1.png',
        title: this.hotelName
      });
      return this.mapInitialized = true;
    }
  };

  HotelResult.prototype.showDescriptionInfo = function(context, event) {
    var el;
    el = $('#hotel-info-tumblr-description');
    if (el.hasClass('active')) {
      return;
    }
    $('.place-buy .tmblr li').removeClass('active');
    el.addClass('active');
    $('#map').hide();
    $('#descr').show();
    return $('#boxContent').css('height', 'auto');
  };

  HotelResult.prototype.showMap = function(context, event) {
    var coords, el, map, mapOptions, marker;
    el = $('#hotels-popup-tumblr-map');
    if (el.hasClass('active')) {
      return;
    }
    $('.place-buy .tmblr li').removeClass('active');
    el.addClass('active');
    $('.tab').hide();
    $('#hotels-popup-map').show();
    $('#boxContent').css('height', $('#hotels-popup-map').height() + $('#hotels-popup-header1').height() + $('#hotels-popup-header2').height() + 'px');
    if (!this.mapInitialized) {
      coords = new google.maps.LatLng(this.lat, this.lng);
      mapOptions = {
        center: coords,
        zoom: 12,
        mapTypeId: google.maps.MapTypeId.ROADMAP
      };
      map = new google.maps.Map($('#hotels-popup-gmap')[0], mapOptions);
      marker = new google.maps.Marker({
        position: coords,
        map: map,
        icon: 'http://voyanga.com/themes/v2/images/pin1.png',
        title: this.hotelName
      });
      this.mapInitialized = true;
    }
    return SizeBox('hotels-popup-body');
  };

  HotelResult.prototype.showDescription = function(context, event) {
    var el;
    el = $('#hotels-popup-tumblr-description');
    if (el.hasClass('active')) {
      return;
    }
    $('.place-buy .tmblr li').removeClass('active');
    el.addClass('active');
    $('.tab').hide();
    $('#hotels-popup-description').show();
    $('#boxContent').css('height', 'auto');
    $('.photo-slide-hotel ul').photoSlider('reinit');
    return SizeBox('hotels-popup-body');
  };

  HotelResult.prototype.initFullInfo = function() {
    var _this = this;
    this.roomCombinations = ko.observableArray([]);
    this.combinedPrice = ko.computed(function() {
      var res, roomSet, _i, _len, _ref;
      res = 0;
      _ref = _this.roomCombinations();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        roomSet = _ref[_i];
        if (roomSet.selectedCount()) {
          res += roomSet.selectedCount() * roomSet.price;
        }
      }
      return res;
    });
    return this.combinedButtonLabel = ko.computed(function() {
      if (_this.combinedPrice() > 0) {
        return _this.selectText();
      } else {
        return 'Не выбраны номера';
      }
    });
  };

  HotelResult.prototype.getFullInfo = function() {
    var api, handler, hotelResults, key, roomSet, url, _i, _len, _ref,
      _this = this;
    if (!this.haveFullInfo()) {
      api = new HotelsAPI;
      hotelResults = [];
      _ref = this.roomSets();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        roomSet = _ref[_i];
        key = roomSet.resultId;
        hotelResults.push(roomSet.resultId + ':' + roomSet.searchId);
      }
      url = 'hotel/search/info?hotelId=' + this.hotelId;
      url += '&hotelResult=' + hotelResults.join(',');
      handler = function(data) {
        var cancelObjs, ind, set, _j, _len1, _ref1, _ref2, _ref3;
        if (!data.hotel) {
          return false;
        }
        _this.initFullInfo();
        _ref1 = data.hotel.details;
        for (ind in _ref1) {
          roomSet = _ref1[ind];
          set = new RoomSet(roomSet, _this, _this.duration);
          _this.roomCombinations.push(set);
        }
        cancelObjs = {};
        _ref2 = data.hotel.oldHotels;
        for (ind in _ref2) {
          roomSet = _ref2[ind];
          key = roomSet.resultId;
          cancelObjs[key] = roomSet;
        }
        _ref3 = _this.roomSets();
        for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
          roomSet = _ref3[_j];
          key = roomSet.resultId;
          if (cancelObjs[key]) {
            roomSet.addCancelationRules(cancelObjs[key]);
          }
        }
        _this.roomMixed = ko.computed(function() {
          var result, resultsObj, _k, _l, _len2, _len3, _ref4, _ref5;
          resultsObj = {};
          _ref4 = _this.roomSets();
          for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
            roomSet = _ref4[_k];
            key = roomSet.key();
            if (typeof resultsObj[key] === 'undefined') {
              resultsObj[key] = roomSet;
            }
          }
          _ref5 = _this.roomCombinations();
          for (_l = 0, _len3 = _ref5.length; _l < _len3; _l++) {
            roomSet = _ref5[_l];
            key = roomSet.key();
            if (typeof resultsObj[key] === 'undefined') {
              resultsObj[key] = roomSet;
            }
          }
          result = [];
          for (key in resultsObj) {
            roomSet = resultsObj[key];
            result.push(roomSet);
          }
          return result;
        });
        return _this.haveFullInfo(true);
      };
      return api.search(url, handler);
    }
  };

  HotelResult.prototype.combinationClick = function() {
    return console.log('combinati data = _.filter @data(), (el) -> el.visible()on click');
  };

  HotelResult.prototype.readMore = function(context, event) {
    var el, text_el;
    el = $(event.currentTarget);
    text_el = el.parent().find('.text');
    if (this.showMoreDesc()) {
      text_el.find('.endDesc').fadeIn('fast', function() {
        return text_el.find('.endDesc').css('display', 'inline');
      });
      this.showMoreDesc(false);
    } else {
      text_el.find('.endDesc').fadeOut('fast');
      this.showMoreDesc(true);
    }
    return SizeBox('hotels-popup-body');
  };

  HotelResult.prototype.back = function() {
    return this.trigger('back');
  };

  HotelResult.prototype.select = function(room, elem) {
    var ticketValidCheck,
      _this = this;
    if (room.roomSets) {
      room = room.roomSets()[0];
      Utils.scrollTo('.info-trip');
      return;
    }
    if (this.tours()) {
      this.activeResultId(room.resultId);
      return this.trigger('select', {
        roomSet: room,
        hotel: this
      }, elem);
    } else {
      ticketValidCheck = $.Deferred();
      ticketValidCheck.done(function(roomSet) {
        var adt, result, _i, _len, _ref;
        result = {};
        result.module = 'Hotels';
        result.type = 'hotel';
        result.searchId = roomSet.parent.cacheId;
        result.searchKey = roomSet.resultId;
        result.adults = 0;
        result.age = false;
        result.cots = 0;
        _ref = _this.parent.rawSP.rooms;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          room = _ref[_i];
          adt = room.adt;
          if (!(adt != null)) {
            adt += room.adultCount;
          }
          result.adults += adt * 1;
          if (room.childAge) {
            result.age = room.childAgeage;
          }
          result.cots += room.cots * 1;
        }
        GAPush(['_trackEvent', 'Hotel_press_button_buy', _this.GAKey(), _this.GAData()]);
        return Utils.toBuySubmit([result]);
      });
      return this.parent.checkTicket(room, ticketValidCheck);
    }
  };

  HotelResult.prototype.GAKey = function() {
    var sp;
    if (this.rawSP) {
      sp = this.rawSP;
    } else {
      sp = this.parent.rawSP;
    }
    return sp.city;
  };

  HotelResult.prototype.GAData = function() {
    var adt, chd, passangers, result, room, sp, _i, _len, _ref;
    if (this.rawSP) {
      sp = this.rawSP;
    } else {
      sp = this.parent.rawSP;
    }
    result = "1";
    passangers = [0, 0, 0];
    _ref = sp.rooms;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      room = _ref[_i];
      adt = room.adultCount || room.adt;
      if (room.childCount != null) {
        chd = room.childCount;
      } else {
        chd = room.chd;
      }
      passangers[0] += adt * 1;
      passangers[1] += chd * 1;
      passangers[2] += room.cots * 1;
    }
    result += ", " + passangers.join(" - ");
    result += ", " + moment(sp.checkIn).format('D.M.YYYY') + ' - ' + moment(sp.checkIn).add(sp.duration, 'days').format('D.M.YYYY');
    result += ", " + moment(sp.checkIn).diff(moment(), 'days') + " - " + sp.duration;
    return result;
  };

  HotelResult.prototype.smallMapUrl = function() {
    var base;
    base = "//maps.googleapis.com/maps/api/staticmap?zoom=13&size=310x259&maptype=roadmap&markers=icon:http://voyanga.com/themes/v2/images/pin1.png%7Ccolor:red%7Ccolor:red%7C";
    base += "%7C";
    base += this.lat + "," + this.lng;
    base += "&sensor=false";
    return base;
  };

  HotelResult.prototype.putToMap = function(gMap) {
    var city, country, gMarker, latLng,
      _this = this;
    if (this.lat && this.lng) {
      latLng = new google.maps.LatLng(this.lat, this.lng);
      this.parent.addMapPoint(latLng);
      gMarker = new google.maps.Marker({
        position: latLng,
        map: gMap,
        icon: this.parent.markerImage,
        draggable: false
      });
      this.gMarker = gMarker;
      google.maps.event.addListener(gMarker, 'mouseover', (function(hotel) {
        return function(ev) {
          return _this.parent.gMapPointShowWin(ev, hotel);
        };
      })(this));
      google.maps.event.addListener(gMarker, 'mouseout', (function(hotel) {
        return function(ev) {
          return _this.parent.gMapPointHideWin(ev, hotel);
        };
      })(this));
      google.maps.event.addListener(gMarker, 'click', (function(hotel) {
        return function(ev) {
          return _this.parent.gMapPointClick(ev, hotel);
        };
      })(this));
      return this.parent.gMarkers.push(gMarker);
    } else {
      city = this.parent.city.localEn;
      country = this.parent.city.country ? ', ' + this.parent.city.country : '';
      return this.parent.gMapGeocoder.geocode({
        address: this.address + ', ' + city + country
      }, function(geoInfo, status) {
        if (status === google.maps.GeocoderStatus.OK) {
          _this.lat = geoInfo[0].geometry.location.lat();
          _this.lng = geoInfo[0].geometry.location.lng();
          _this.putToMap(gMap);
          return _this.parent.mapCluster.addMarker(_this.gMarker);
        }
      });
    }
  };

  HotelResult.prototype.getLatLng = function() {
    var city, country, gMapGeocoder,
      _this = this;
    this.latLng = ko.observable(new google.maps.LatLng(this.lat, this.lng));
    if (this.lat && this.lng) {

    } else {
      city = this.parent.city.localEn;
      country = this.parent.city.country ? ', ' + this.parent.city.country : '';
      gMapGeocoder = new google.maps.Geocoder();
      gMapGeocoder.geocode({
        address: this.address + ', ' + city + country
      }, function(geoInfo, status) {
        if (status === google.maps.GeocoderStatus.OK) {
          _this.lat = geoInfo[0].geometry.location.lat();
          _this.lng = geoInfo[0].geometry.location.lng();
          return _this.latLng(new google.maps.LatLng(_this.lat, _this.lng));
        }
      });
    }
    return this.latLng;
  };

  HotelResult.prototype.getParams = function() {
    var result;
    result = {};
    result.hotelId = this.hotelId;
    result.roomSet = this.roomSets()[0].getParams();
    return JSON.stringify(result);
  };

  HotelResult.prototype.getPostData = function() {
    var result;
    result = {};
    result.data = this.roomSets()[0]._data;
    result.type = 'hotel';
    return result;
  };

  return HotelResult;

})();

HotelsResultSet = (function() {

  function HotelsResultSet(rawData, searchParams, activeHotel) {
    var checkIn, checkOut, duration, hotel, key, result, _i, _j, _len, _len1, _ref, _ref1, _ref2,
      _this = this;
    this.searchParams = searchParams;
    this.activeHotel = activeHotel;
    this.afterRender = __bind(this.afterRender, this);

    this.postFilters = __bind(this.postFilters, this);

    this.postInit = __bind(this.postInit, this);

    this.selectHotel = __bind(this.selectHotel, this);

    this.sortByRating = __bind(this.sortByRating, this);

    this.sortByPrice = __bind(this.sortByPrice, this);

    this.checkShowMore = __bind(this.checkShowMore, this);

    this.showMoreResults = __bind(this.showMoreResults, this);

    this.getDateInterval = __bind(this.getDateInterval, this);

    this.selectFromPopup = __bind(this.selectFromPopup, this);

    this.gMapPointClick = __bind(this.gMapPointClick, this);

    this.gMapPointHideWin = __bind(this.gMapPointHideWin, this);

    this.gMapPointShowWin = __bind(this.gMapPointShowWin, this);

    this.hideFullMap = __bind(this.hideFullMap, this);

    this.showFullMapFunc = __bind(this.showFullMapFunc, this);

    this.setFullMapZoom = __bind(this.setFullMapZoom, this);

    this.addMapPoint = __bind(this.addMapPoint, this);

    this.resetMapCenter = __bind(this.resetMapCenter, this);

    this.findAndSelectSameParams = __bind(this.findAndSelectSameParams, this);

    this.findAndSelectSame = __bind(this.findAndSelectSame, this);

    this.findAndSelect = __bind(this.findAndSelect, this);

    this.select = __bind(this.select, this);

    this._results = {};
    if (rawData.error) {
      throw rawData.error;
    }
    if (!rawData.hotels) {
      throw "404";
    }
    this.noresults = rawData.hotels.length === 0;
    this.creationMoment = moment();
    this.rawSP = this.searchParams;
    this.cacheId = rawData.cacheId;
    this.tours = ko.observable(false);
    this.checkIn = moment(this.searchParams.checkIn);
    this.checkOut = moment(this.checkIn).add('days', this.searchParams.duration);
    this.city = this.searchParams.cityFull;
    if (this.searchParams.duration) {
      duration = this.searchParams.duration;
    }
    if (duration === 0 || typeof duration === 'undefined') {
      _ref = rawData.hotels;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        hotel = _ref[_i];
        if (typeof hotel.duration === 'undefined') {
          checkIn = dateUtils.fromIso(hotel.checkIn);
          checkOut = dateUtils.fromIso(hotel.checkOut);
          duration = checkOut.valueOf() - checkIn.valueOf();
          duration = Math.floor(duration / (3600 * 24 * 1000));
        } else {
          duration = hotel.duration;
        }
        break;
      }
    }
    this.wordDays = Utils.wordAfterNum(duration, 'день', 'дня', 'дней');
    this.wordNights = Utils.wordAfterNum(duration, 'ночь', 'ночи', 'ночей');
    this.fullMapInitialized = false;
    this.showFullMap = ko.observable(false);
    this.minPrice = false;
    this.maxPrice = false;
    _ref1 = rawData.hotels;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      hotel = _ref1[_j];
      key = hotel.hotelId;
      if (this._results[key]) {
        this._results[key].push(hotel);
        this.minPrice = this._results[key].minPrice < this.minPrice ? this._results[key].minPrice : this.minPrice;
        this.maxPrice = this._results[key].maxPrice > this.maxPrice ? this._results[key].maxPrice : this.maxPrice;
      } else {
        result = new HotelResult(hotel, this, duration, this.activeHotel, rawData.hotelsDetails[key + 'd']);
        this._results[key] = result;
        if (this.minPrice === false) {
          this.minPrice = this._results[key].minPrice;
          this.maxPrice = this._results[key].maxPrice;
        } else {
          this.minPrice = this._results[key].minPrice < this.minPrice ? this._results[key].minPrice : this.minPrice;
          this.maxPrice = this._results[key].maxPrice > this.maxPrice ? this._results[key].maxPrice : this.maxPrice;
        }
      }
    }
    this.data = ko.observableArray();
    this.showParts = ko.observable(1);
    this.showLimit = 20;
    this.sortBy = ko.observable('minPrice');
    this.ordBy = ko.observable(1);
    this.resultsForRender = ko.computed(function() {
      var limit, ordKey, results, sortKey, _k, _len2, _ref2;
      limit = _this.showParts() * _this.showLimit;
      results = [];
      sortKey = _this.sortBy();
      ordKey = _this.ordBy();
      _this.data.sort(function(left, right) {
        if (left[sortKey] < right[sortKey]) {
          return -1 * ordKey;
        }
        if (left[sortKey] > right[sortKey]) {
          return 1 * ordKey;
        }
        return 0;
      });
      _ref2 = _this.data();
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        result = _ref2[_k];
        if (result.visible()) {
          results.push(result);
          limit--;
        }
        if (limit <= 0) {
          break;
        }
      }
      return results;
    });
    this.numResults = ko.observable(0);
    this.filtersConfig = false;
    this.pagesLoad = false;
    this.toursOpened = false;
    _ref2 = this._results;
    for (key in _ref2) {
      result = _ref2[key];
      if (result.numPhotos) {
        this.data.push(result);
      }
    }
    this.sortByPriceClass = ko.computed(function() {
      var ret;
      ret = 'hotel-sort-by-item';
      if (_this.sortBy() === 'minPrice') {
        ret += ' active';
      }
      return ret;
    });
    this.sortByRatingClass = ko.computed(function() {
      var ret;
      ret = 'hotel-sort-by-item';
      if (_this.sortBy() === 'rating') {
        ret += ' active';
      }
      return ret;
    });
    this.showButtonMoreResults = ko.computed(function() {
      return (_this.numResults() > (_this.showParts() * _this.showLimit)) && (DetectMobileQuick() || DetectTierTablet());
    });
    window.hrs = this;
  }

  HotelsResultSet.prototype.select = function(hotel, event) {
    var backUrl,
      _this = this;
    hotel.oldPageTop = $("html").scrollTop() | $("body").scrollTop();
    backUrl = window.location.hash;
    backUrl = backUrl.split('hotelId')[0];
    window.app.navigate(backUrl + 'hotelId/' + hotel.hotelId + '/');
    window.app.activeModuleInstance().controller.searchParams.hotelId(hotel.hotelId);
    window.app.activeModuleInstance().controller.searchParams.lastHotel = hotel;
    hotel.off('back');
    hotel.on('back', function() {
      window.app.navigate(backUrl);
      window.app.activeModuleInstance().controller.searchParams.hotelId(false);
      window.app.render({
        results: ko.observable(_this)
      }, 'results');
      return window.setTimeout(function() {
        if (!_this.showFullMap()) {
          Utils.scrollTo(hotel.oldPageTop, false);
          return Utils.scrollTo('#hotelResult' + hotel.hotelId);
        } else {
          _this.showFullMapFunc(null, null, true);
          _this.gAllMap.setCenter(_this.gMapCenter);
          return _this.gAllMap.setZoom(_this.gMapZoom);
        }
      }, 50);
    });
    hotel.getFullInfo();
    window.app.render(hotel, 'info-template');
    return Utils.scrollTo('#content', false);
  };

  HotelsResultSet.prototype.findAndSelect = function(roomSet) {
    var hotel, possibleRoomSet, _i, _j, _len, _len1, _ref, _ref1;
    _ref = this.data();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      hotel = _ref[_i];
      if (hotel.hotelId === roomSet.parent.hotelId) {
        _ref1 = hotel.roomSets();
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          possibleRoomSet = _ref1[_j];
          if (possibleRoomSet.similarityHash() === roomSet.similarityHash()) {
            return possibleRoomSet;
          }
        }
      }
    }
    return false;
  };

  HotelsResultSet.prototype.findAndSelectSame = function(roomSet) {
    var hotel, possibleRoomSet, result, _i, _j, _len, _len1, _ref, _ref1;
    result = false;
    result = this.findAndSelect(roomSet);
    if (!result) {
      _ref = this.data();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        hotel = _ref[_i];
        if (hotel.hotelId === roomSet.parent.hotelId) {
          _ref1 = hotel.roomSets();
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            possibleRoomSet = _ref1[_j];
            return possibleRoomSet;
          }
        }
      }
    }
    return result;
  };

  HotelsResultSet.prototype.findAndSelectSameParams = function(stars, latLngObservable) {
    var dist, hotel, minDistance, minPrice, possibleRoomSet, sameHotel, _i, _j, _len, _len1, _ref, _ref1;
    sameHotel = false;
    minDistance = 5000;
    minPrice = 99999;
    _ref = this.data();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      hotel = _ref[_i];
      if (!sameHotel) {
        sameHotel = hotel;
      }
      if (hotel.categoryId === stars) {
        dist = Utils.calculateTheDistance(latLngObservable().lat(), latLngObservable().lng(), hotel.lat, hotel.lng);
        if (dist > 5000) {
          dist = 5000;
        }
        if ((dist * 2 + hotel.minPrice) < (minDistance * 2 + minPrice)) {
          sameHotel = hotel;
          minDistance = dist;
          minPrice = hotel.minPrice;
        }
      }
    }
    if (sameHotel) {
      _ref1 = sameHotel.roomSets();
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        possibleRoomSet = _ref1[_j];
        return possibleRoomSet;
      }
    }
  };

  HotelsResultSet.prototype.resetMapCenter = function() {
    return this.computedCenter = new google.maps.LatLngBounds();
  };

  HotelsResultSet.prototype.addMapPoint = function(latLng) {
    return this.computedCenter.extend(latLng);
  };

  HotelsResultSet.prototype.setFullMapZoom = function() {
    this.gAllMap.fitBounds(this.computedCenter);
    return this.gAllMap.setCenter(this.computedCenter.getCenter());
  };

  HotelsResultSet.prototype.showFullMapFunc = function(targetObject, event, fromBackAction, fromFilters) {
    var offset, posTop, stime,
      _this = this;
    if (fromBackAction == null) {
      fromBackAction = false;
    }
    if (fromFilters == null) {
      fromFilters = false;
    }
    this.oldPageTop = $("html").scrollTop() | $("body").scrollTop();
    if (!this.showFullMap()) {
      Utils.scrollTo('#content');
    }
    stime = 400;
    offset = $('#content').offset();
    posTop = $('html').scrollTop() || $('body').scrollTop();
    if (!this.showFullMap() || Math.abs(posTop - offset.top) < 4) {
      stime = 100;
    }
    return window.setTimeout(function() {
      var center, hotel, options, _i, _len, _ref;
      _this.showFullMap(true);
      $('#all-hotels-results').hide();
      $('#all-hotels-map').show();
      mapAllPageView();
      center = new google.maps.LatLng(_this.city.latitude, _this.city.longitude);
      options = {
        'zoom': 10,
        'center': center,
        'mapTypeId': google.maps.MapTypeId.ROADMAP
      };
      _this.fullMapInitialized = false;
      _this.mapCluster = null;
      if (!_this.fullMapInitialized) {
        _this.gAllMap = new google.maps.Map($('#all-hotels-map')[0], options);
        window.gmap = _this.gAllMap;
        _this.markerImage = new google.maps.MarkerImage('/themes/v2/images/pin1.png', new google.maps.Size(31, 31));
        _this.markerImageHover = new google.maps.MarkerImage('/themes/v2/images/pin2.png', new google.maps.Size(31, 31));
        _this.gMapGeocoder = new google.maps.Geocoder();
        _this.resetMapCenter();
        _this.gMapOverlay = new googleInfoDiv();
        _this.gMapOverlay.setPosition(center);
        _this.gMapOverlay.setMap(_this.gAllMap);
        _this.gMapOverlay.hide();
        _this.clusterStyle = [
          {
            url: '/themes/v2/images/cluster_one.png',
            height: 43,
            width: 31,
            anchor: [7, 0],
            textColor: '#000',
            textSize: 18
          }, {
            url: '/themes/v2/images/cluster_two.png',
            height: 54,
            width: 39,
            anchor: [11, 0],
            textColor: '#000',
            textSize: 18
          }, {
            url: '/themes/v2/images/cluster_three.png',
            height: 65,
            width: 47,
            anchor: [15, 0],
            textColor: '#000',
            textSize: 18
          }
        ];
      }
      _this.gMarkers = [];
      _ref = _this.data();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        hotel = _ref[_i];
        if (hotel.visible()) {
          hotel.putToMap(_this.gAllMap);
        }
      }
      if (!_this.fullMapInitialized) {
        _this.mapCluster = new MarkerClusterer(_this.gAllMap, _this.gMarkers, {
          styles: _this.clusterStyle
        });
        _this.fullMapInitialized = true;
      } else {
        _this.mapCluster.addMarkers(_this.gMarkers);
      }
      if (fromBackAction && _this.gMapCenter && _this.gMapZoom) {
        _this.gAllMap.setCenter(_this.gMapCenter);
        _this.gAllMap.setZoom(_this.gMapZoom);
      } else if (_this.gMarkers.length > 0) {
        _this.setFullMapZoom();
      }
      if (!fromFilters) {
        return minimizeFilter();
      }
    }, stime);
  };

  HotelsResultSet.prototype.hideFullMap = function() {
    var _this = this;
    $('#all-hotels-results').show();
    $('#all-hotels-map').hide();
    this.showFullMap(false);
    return window.setTimeout(function() {
      removeFilterShow();
      jsPaneScrollHeight();
      return Utils.scrollTo(_this.oldPageTop);
    }, 50);
  };

  HotelsResultSet.prototype.gMapPointShowWin = function(event, hotel) {
    var div;
    div = '<div id="relInfoPosition"><div id="infoWrapperDiv"><div class="hotelMapInfo"><div class="hotelMapImage"><img src="' + hotel.frontPhoto.largeUrl + '"></div><div class="stars ' + hotel.stars + '"></div><div class="hotelMapName">' + hotel.hotelName + '</div><div class="mapPriceDiv">от <div class="mapPriceValue">' + hotel.minPrice + '</div> <span class="rur">o</span>/ночь</div></div></div></div>';
    this.gMapOverlay.setContent(div);
    this.gMapOverlay.setPosition(event.latLng);
    this.gMapOverlay.show();
    return hotel.gMarker.setIcon(this.markerImageHover);
  };

  HotelsResultSet.prototype.gMapPointHideWin = function(event, hotel) {
    var rnd;
    hotel.gMarker.setIcon(this.markerImage);
    rnd = Math.round(Math.random() * 5);
    this.gMapOverlay.hide();
    if (rnd === 40) {
      return this.gMapInfoWin.close();
    }
  };

  HotelsResultSet.prototype.gMapPointClick = function(event, hotel) {
    this.gMapCenter = this.gAllMap.getCenter();
    this.gMapZoom = this.gAllMap.getZoom();
    return this.select(hotel);
  };

  HotelsResultSet.prototype.selectFromPopup = function(hotel, event) {
    var backUrl,
      _this = this;
    hotel.activePopup.close();
    backUrl = window.location.hash;
    backUrl = backUrl.split('hotelId')[0];
    window.app.navigate(backUrl + 'hotelId/' + hotel.hotelId + '/');
    window.app.activeModuleInstance().controller.searchParams.hotelId(hotel.hotelId);
    window.app.activeModuleInstance().controller.searchParams.lastHotel = hotel;
    hotel.off('back');
    hotel.on('back', function() {
      window.app.navigate(backUrl);
      window.app.activeModuleInstance().controller.searchParams.hotelId(false);
      window.app.render({
        results: ko.observable(hotel.parent)
      }, 'results');
      return window.setTimeout(function() {
        Utils.scrollTo(hotel.oldPageTop, false);
        Utils.scrollTo('#hotelResult' + hotel.hotelId);
        return console.log(hotel.oldPageTop);
      }, 50);
    });
    hotel.getFullInfo();
    window.app.render(hotel, 'info-template');
    return Utils.scrollTo('#content', false);
  };

  HotelsResultSet.prototype.getDateInterval = function() {
    return dateUtils.formatDayMonthInterval(this.checkIn._d, this.checkOut._d);
  };

  HotelsResultSet.prototype.showMoreResults = function() {
    var fv, sv;
    fv = this.data()[0];
    sv = this.data()[1];
    if (this.numResults() > (this.showParts() * this.showLimit)) {
      this.showParts(this.showParts() + 1);
    }
    fv = this.data()[0];
    return sv = this.data()[1];
  };

  HotelsResultSet.prototype.checkShowMore = function(ev) {
    var fullHeight, posTop, winHeight;
    posTop = $('html').scrollTop() || $('body').scrollTop();
    fullHeight = $('html')[0].scrollHeight || $('body')[0].scrollHeight;
    winHeight = $(window).height();
    if (((fullHeight - (posTop + winHeight)) < 2) && !this.showFullMap()) {
      if ((window.app.activeView() === 'hotels-results') || (window.app.activeView() === 'tours-results' && window.app.activeModuleInstance().innerTemplate === 'hotels-results')) {
        return this.showMoreResults();
      }
    }
  };

  HotelsResultSet.prototype.sortByPrice = function() {
    if (this.sortBy() !== 'minPrice') {
      this.sortBy('minPrice');
      this.ordBy(1);
      return this.showParts(1);
    }
  };

  HotelsResultSet.prototype.sortByRating = function() {
    if (this.sortBy() !== 'rating') {
      this.sortBy('rating');
      this.ordBy(-1);
      return this.showParts(1);
    }
  };

  HotelsResultSet.prototype.selectHotel = function(hotel, event) {
    return this.select(hotel, event);
  };

  HotelsResultSet.prototype.postInit = function() {
    return this.filters = new HotelFiltersT(this);
  };

  HotelsResultSet.prototype.postFilters = function(fromFilters) {
    var data, fv, sv,
      _this = this;
    if (fromFilters == null) {
      fromFilters = false;
    }
    fv = this.data()[0];
    sv = this.data()[1];
    data = _.filter(this.data(), function(el) {
      return el.visible();
    });
    this.numResults(data.length);
    if (!this.pagesLoad || fromFilters) {
      this.showParts(1);
    } else {
      this.showParts(this.pagesLoad);
    }
    window.setTimeout(function() {
      var kb, offset, posTop;
      fv = _this.data()[0];
      sv = _this.data()[1];
      if (fromFilters) {
        jsPaneScrollHeight();
      }
      if (window.app.activeView() === 'hotels-results') {
        offset = $('#content').offset();
        posTop = $('html').scrollTop() || $('body').scrollTop();
        if ((posTop > offset.top) && !(fromFilters && _this.showFullMap())) {
          Utils.scrollTo('#content');
        }
      } else if ((_this.toursOpened && _this.tours() && _this.filtersConfig) || (_this.tours() && _this.showFullMap())) {
        kb = true;
      } else {
        Utils.scrollTo(0, false);
      }
      if (_this.showFullMap()) {
        _this.showFullMapFunc(null, null, false, true);
      }
      _this.toursOpened = false;
      fv = _this.data()[0];
      return sv = _this.data()[1];
    }, 50);
    fv = this.data()[0];
    return sv = this.data()[1];
  };

  HotelsResultSet.prototype.afterRender = function() {
    var _this = this;
    return window.hotelsScrollCallback = function(ev) {
      return _this.checkShowMore(ev);
    };
  };

  return HotelsResultSet;

})();
