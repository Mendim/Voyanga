// Generated by CoffeeScript 1.4.0
/*
SEARCH controller, should be splitted once we will get more actions here
*/

var AviaController,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

AviaController = (function() {

  function AviaController(searchParams) {
    this.searchParams = searchParams;
    this.checkTicketAction = __bind(this.checkTicketAction, this);

    this.indexAction = __bind(this.indexAction, this);

    this.handleResults = __bind(this.handleResults, this);

    this.handleSearch = __bind(this.handleSearch, this);

    this.searchAction = __bind(this.searchAction, this);

    this.api = new AviaAPI;
    this.routes = {
      '/search/*rest': this.searchAction,
      '': this.indexAction
    };
    this.results = ko.observable();
    _.extend(this, Backbone.Events);
  }

  AviaController.prototype.searchAction = function(args) {
    this.searchParams.fromString(args);
    window.VisualLoaderInstance.start(this.api.loaderDescription, 18);
    return this.api.search(this.searchParams.url(), this.handleSearch);
  };

  AviaController.prototype.handleSearch = function(data) {
    var stacked;
    try {
      stacked = this.handleResults(data);
    } catch (err) {
      window.VisualLoaderInstance.hide();
      if (err === '404') {
        new ErrorPopup('avia404');
        return;
      }
      throw new Error("Unable to build AviaResultSet from search response");
    }
    this.results(stacked);
    GAPush(['_trackEvent', 'Avia_show_search_results', this.searchParams.GAKey(), this.searchParams.GAData(), stacked.data.length, true]);
    this.render('results', {
      results: this.results
    });
    return ko.processAllDeferredBindingUpdates();
  };

  AviaController.prototype.handleResults = function(data) {
    var stacked;
    stacked = new AviaResultSet(data.flights.flightVoyages, data.siblings);
    stacked.injectSearchParams(data.searchParams);
    stacked.postInit();
    stacked.checkTicket = this.checkTicketAction;
    return stacked;
  };

  AviaController.prototype.indexAction = function() {
    return this.render("index", {});
  };

  AviaController.prototype.checkTicketAction = function(result, resultDeferred) {
    var diff, now,
      _this = this;
    now = moment();
    diff = now.diff(this.results().creationMoment, 'seconds');
    if (diff < AVIA_TICKET_TIMELIMIT) {
      resultDeferred.resolve(result);
      return;
    }
    window.VisualLoaderInstance.start('Идет проверка выбранных выриантов<br>Это может занять от 5 до 30 секунд');
    return this.api.search(this.searchParams.url(), function(data) {
      var stacked;
      try {
        stacked = _this.handleResults(data);
      } catch (err) {
        window.VisualLoaderInstance.hide();
        throw new Error("Unable to build AviaResultSet from search response. Check ticket");
      }
      result = stacked.findAndSelect(result);
      window.VisualLoaderInstance.hide();
      if (result) {
        return resultDeferred.resolve(result);
      } else {
        new ErrorPopup('aviaNoTicketOnValidation', "Билет не найден, выберите другой.", false, function() {});
        return _this.results(stacked);
      }
    });
  };

  AviaController.prototype.render = function(view, data) {
    return this.trigger("viewChanged", view, data);
  };

  return AviaController;

})();
