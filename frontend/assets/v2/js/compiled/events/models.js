// Generated by CoffeeScript 1.3.3
var City, Event, EventCategory, EventCategorySet, EventLink, EventLinkSet, EventPrice, EventPriceSet, EventSet, EventTag, EventTagSet, EventTour, EventTourResultSet, EventTourSet,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ko.bindingHandlers.highlightChange = {
  update: function(element, valueAccessor, allBindingsAccessor) {
    var allBindings, newEl, previousImage, value, valueUnwrapped, varLeftPos, varLeftPosStart, varTopPos, varTopPosStart;
    value = valueAccessor();
    allBindings = allBindingsAccessor();
    valueUnwrapped = ko.utils.unwrapObservable(value);
    previousImage = allBindings.previousImage;
    newEl = $('<div class="IMGmain"><img src=""></div>');
    newEl.appendTo(".centerTours");
    $(".IMGmain").eq(0).find('img').attr("src", previousImage());
    indexIMGresizeCenter(0);
    varLeftPos = $(".IMGmain").eq(1).css("left");
    varTopPos = $(".IMGmain").eq(1).css("top");
    varLeftPos = parseInt(varLeftPos.slice(0, -2));
    varTopPos = parseInt(varTopPos.slice(0, -2));
    varLeftPosStart = varLeftPos;
    varTopPosStart = varTopPos;
    $(".IMGmain").eq(1).css("opacity", "0").css("left", varLeftPosStart + "px").css("top", varTopPosStart + "px").find("img").attr("src", valueUnwrapped);
    previousImage(valueUnwrapped);
    slideToursSlide();
    ResizeAvia();
    return $(".IMGmain").eq(1).find("img").load(function() {
      indexIMGresizeCenter(1);
      $(".IMGmain").eq(0).animate({
        opacity: 0
      }, speedAnimateChangePic, function() {
        return $(".IMGmain:not(:last-child)").eq(0).remove();
      });
      return $(".IMGmain").eq(1).animate({
        opacity: 1
      }, speedAnimateChangePic);
    });
  }
};

Event = (function(_super) {

  __extends(Event, _super);

  function Event(data) {
    var _this = this;
    this.startDate = ko.observable(new Date(data.startDate));
    this.endDate = ko.observable(new Date(data.endDate));
    this.address = ko.observable(data.address);
    this.contact = ko.observable(data.contact);
    this.preview = ko.observable(data.preview);
    this.description = ko.observable(data.description);
    this.title = ko.observable(data.title);
    this.categories = ko.observableArray(new EventCategorySet(data.categories));
    this.links = ko.observableArray(new EventLinkSet(data.links));
    this.tags = ko.observableArray(new EventTagSet(data.tags));
    this.prices = ko.observableArray(new EventPriceSet(data.prices));
    this.tour = ko.observable(new EventTourSet(data.tours));
    this.image = ko.observable(data.image);
    this.thumb = ko.observable(data.thumb);
    this.active = ko.observable(data.active);
    this.minimalPrice = ko.computed(function() {
      return _this.prices()[0].price;
    });
  }

  Event.prototype.duration = function() {
    return dateUtils.formatDuration(this._duration);
  };

  return Event;

})(Backbone.Events);

EventSet = (function() {

  function EventSet(events) {
    this.closeEventsMaps = __bind(this.closeEventsMaps, this);

    this.closeEventsPhoto = __bind(this.closeEventsPhoto, this);

    this.setActive = __bind(this.setActive, this);

    var _this = this;
    console.trace();
    this.events = ko.observableArray(events);
    this.currentTitle = ko.observable('HUY');
    this.currentEvent = ko.computed(function() {
      var activeEvents;
      activeEvents = _.filter(_this.events(), function(event) {
        return event.active();
      });
      console.log("SETTING TAITL", activeEvents[0].title());
      _this.currentTitle(activeEvents[0].title());
      return activeEvents[0];
    });
    this.previousImage = ko.observable('');
    this.activeMaps = 0;
  }

  EventSet.prototype.setActive = function(valueAccessor, event) {
    var _this = this;
    if (this.activeMaps === 1) {
      this.closeEventsMaps();
    }
    $('.slideTours').find('.triangle').animate({
      'top': '0px'
    }, 200);
    this.events(_.map(this.events(), function(event) {
      return event.active(false);
    }));
    valueAccessor.active(true);
    return $(event.target).closest('.toursTicketsMain').find('.triangle').animate({
      'top': '-16px'
    }, 200);
  };

  EventSet.prototype.closeEventsPhoto = function() {
    $(".slideTours").find(".active").find(".triangle").animate({
      top: "0px"
    }, 200);
    $(".toursTicketsMain").removeClass("active");
    $(".mapsBigAll").css("opacity", "0");
    $(".toursBigAll").animate({
      opacity: 0
    }, 700, function() {
      return $(this).css("display", "none");
    });
    $(".mapsBigAll").show();
    $(".mapsBigAll").animate({
      opacity: 1
    }, 700);
    return this.activeMaps = 1;
  };

  EventSet.prototype.closeEventsMaps = function() {
    $(".toursBigAll").css("opacity", "0");
    $(".mapsBigAll").animate({
      opacity: 0
    }, 700, function() {
      return $(this).css("display", "none");
    });
    $(".toursBigAll").show();
    $(".toursBigAll").animate({
      opacity: 1
    }, 700);
    return this.activeMaps = 0;
  };

  return EventSet;

})();

EventCategory = (function() {

  function EventCategory(data) {
    this.id = ko.observable(data.id);
    this.title = ko.observable(data.title);
  }

  return EventCategory;

})();

EventCategorySet = (function() {

  function EventCategorySet(data) {
    var set;
    set = [];
    $.each(data, function(i, eventCategory) {
      return set.push(new EventCategory(eventCategory));
    });
    return set;
  }

  return EventCategorySet;

})();

EventLink = (function() {

  function EventLink(data) {
    this.title = ko.observable(data.title);
    this.url = ko.observable(data.url);
  }

  return EventLink;

})();

EventLinkSet = (function() {

  function EventLinkSet(data) {
    var set;
    set = [];
    $.each(data, function(i, eventLink) {
      return set.push(new EventLink(eventLink));
    });
    return set;
  }

  return EventLinkSet;

})();

EventTag = (function() {

  function EventTag(data) {
    this.name = ko.observable(data.name);
  }

  return EventTag;

})();

EventTagSet = (function() {

  function EventTagSet(data) {
    var set;
    set = [];
    $.each(data, function(i, eventTag) {
      return set.push(new EventTag(eventTag));
    });
    return set;
  }

  return EventTagSet;

})();

City = (function() {

  function City(data) {
    this.title = ko.observable(data.title);
  }

  return City;

})();

EventPrice = (function() {

  function EventPrice(data) {
    this.city = ko.observable(new City(data.city));
    this.price = ko.observable(data.price);
  }

  return EventPrice;

})();

EventPriceSet = (function() {

  function EventPriceSet(data) {
    var set;
    set = [];
    $.each(data, function(i, eventPrice) {
      return set.push(new EventPrice(eventPrice));
    });
    return set;
  }

  return EventPriceSet;

})();

EventTour = (function() {

  function EventTour(data) {
    this.name = data.name;
  }

  return EventTour;

})();

EventTourSet = (function() {

  function EventTourSet(data) {
    var set;
    set = [];
    $.each(data, function(i, tour) {
      return set.push(new EventTour(tour));
    });
    return set;
  }

  return EventTourSet;

})();

EventTourResultSet = (function() {

  function EventTourResultSet(resultSet) {
    this.reinit = __bind(this.reinit, this);

    var _this = this;
    this.items = ko.observableArray([]);
    this.selectedCity = ko.observable(resultSet.city.id);
    this.fullPrice = ko.observable(0);
    this.selectedCity.subscribe(function(newCityId) {
      return _this.reinit(window.toursArr[newCityId]);
    });
    this.startCity = ko.observable(resultSet.city.localRu);
    this.activePanel = ko.observable(null);
    this.reinit(resultSet);
  }

  EventTourResultSet.prototype.reinit = function(resultSet) {
    var panelSet,
      _this = this;
    this.resultSet = resultSet;
    this.hasFlight = false;
    this.hasHotel = false;
    this.items([]);
    this.flightCounter = ko.observable(0);
    this.hotelCounter = ko.observable(0);
    this.selected_key = ko.observable('');
    this.selected_best = ko.observable('');
    this.totalCost = 0;
    panelSet = new TourPanelSet();
    this.activePanel(panelSet);
    this.startCity(this.resultSet.city.localRu);
    console.log('reinitEventData', this);
    this.flightCounterWord = ko.computed(function() {
      var res;
      res = Utils.wordAfterNum(_this.flightCounter(), 'авивабилет', 'авиабилета', 'авиабилетов');
      if (_this.hotelCounter() > 0) {
        res = res + ', ';
      }
      return res;
    });
    this.hotelCounterWord = ko.computed(function() {
      return Utils.wordAfterNum(_this.hotelCounter(), 'гостиница', 'гостиницы', 'гостиниц');
    });
    _.each(this.resultSet.items, function(item) {
      var aviaResult;
      if (item.isFlight) {
        _this.hasFlight = true;
        _this.flightCounter(_this.flightCounter() + 1);
        _this.roundTrip = item.flights.length === 2;
        aviaResult = new AviaResult(item, _this);
        aviaResult.sort();
        aviaResult.priceHtml = ko.observable(aviaResult.price + '<span class="rur">o</span>');
        aviaResult.overviewText = ko.observable("Перелет " + aviaResult.departureCity() + ' &rarr; ' + aviaResult.arrivalCity());
        aviaResult.overviewTemplate = 'tours-event-avia-ticket';
        aviaResult.dateClass = ko.observable(_this.roundTrip ? 'blue-two' : 'blue-one');
        aviaResult.isAvia = ko.observable(item.isFlight);
        aviaResult.isHotel = ko.observable(item.isisHotel);
        aviaResult.startDate = aviaResult.departureDate();
        aviaResult.dateHtml = ko.observable('<div class="day">' + dateUtils.formatHtmlDayShortMonth(aviaResult.departureDate()) + '</div>' + (_this.roundTrip ? '<div class="day">' + dateUtils.formatHtmlDayShortMonth(aviaResult.rtDepartureDate()) + '</div>' : ''));
        _this.items.push(aviaResult);
        return _this.totalCost += aviaResult.price;
      } else if (item.isHotel) {
        _this.hasHotel = true;
        _this.hotelCounter(_this.hotelCounter() + 1);
        console.log("Hotel: ", item);
        _this.lastHotel = new HotelResult(item, _this, item.duration, item, item.hotelDetails);
        _this.lastHotel.priceHtml = ko.observable(_this.lastHotel.price + '<span class="rur">o</span>');
        _this.lastHotel.overviewText = ko.observable("<span class='hotel-left-long'>Отель в " + _this.lastHotel.address + "</span><span class='hotel-left-short'>" + _this.lastHotel.address + "</span>");
        _this.lastHotel.dateClass = ko.observable('orange-two');
        _this.lastHotel.overviewTemplate = 'tours-event-hotels-ticket';
        _this.lastHotel.isAvia = ko.observable(item.isFlight);
        _this.lastHotel.isHotel = ko.observable(item.isisHotel);
        _this.lastHotel.startDate = _this.lastHotel.checkIn;
        _this.lastHotel.dateHtml = ko.observable('<div class="day">' + dateUtils.formatHtmlDayShortMonth(_this.lastHotel.checkIn) + '</div>' + '<div class="day">' + dateUtils.formatHtmlDayShortMonth(_this.lastHotel.checkOut) + '</div>');
        _this.items.push(_this.lastHotel);
        return _this.totalCost += _this.lastHotel.roomSets()[0].discountPrice;
      }
    });
    _.sortBy(this.items(), function(item) {
      return item.startDate;
    });
    this.startDate = this.items()[0].startDate;
    this.dateHtml = ko.observable('<div class="day">' + dateUtils.formatHtmlDayShortMonth(this.startDate) + '</div>');
    return this.fullPrice(this.totalCost);
  };

  return EventTourResultSet;

})();
